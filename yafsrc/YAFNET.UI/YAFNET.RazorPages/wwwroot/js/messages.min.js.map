{"version":3,"file":"messages.min.js","mappings":"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","sources":["webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/AbortController.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/AccessTokenHttpClient.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/DefaultHttpClient.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/DefaultReconnectPolicy.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/Errors.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/FetchHttpClient.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/HandshakeProtocol.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/HeaderNames.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/HttpClient.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/HttpConnection.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/HubConnection.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/HubConnectionBuilder.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/IHubProtocol.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/ILogger.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/ITransport.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/JsonHubProtocol.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/Loggers.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/LongPollingTransport.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/MessageBuffer.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/ServerSentEventsTransport.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/Subject.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/TextMessageFormat.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/Utils.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/WebSocketTransport.js","webpack://yetanotherforum-net/./node_modules/@microsoft/signalr/dist/esm/XhrHttpClient.js","webpack://yetanotherforum-net/webpack/bootstrap","webpack://yetanotherforum-net/webpack/runtime/define property getters","webpack://yetanotherforum-net/webpack/runtime/global","webpack://yetanotherforum-net/webpack/runtime/hasOwnProperty shorthand","webpack://yetanotherforum-net/webpack/runtime/make namespace object","webpack://yetanotherforum-net/./wwwroot/lib/pages/messages.ts"],"sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// Rough polyfill of https://developer.mozilla.org/en-US/docs/Web/API/AbortController\r\n// We don't actually ever use the API being polyfilled, we always use the polyfill because\r\n// it's a very new API right now.\r\n// Not exported from index.\r\n/** @private */\r\nexport class AbortController {\r\n    constructor() {\r\n        this._isAborted = false;\r\n        this.onabort = null;\r\n    }\r\n    abort() {\r\n        if (!this._isAborted) {\r\n            this._isAborted = true;\r\n            if (this.onabort) {\r\n                this.onabort();\r\n            }\r\n        }\r\n    }\r\n    get signal() {\r\n        return this;\r\n    }\r\n    get aborted() {\r\n        return this._isAborted;\r\n    }\r\n}\r\n//# sourceMappingURL=AbortController.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { HttpClient } from \"./HttpClient\";\r\n/** @private */\r\nexport class AccessTokenHttpClient extends HttpClient {\r\n    constructor(innerClient, accessTokenFactory) {\r\n        super();\r\n        this._innerClient = innerClient;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n    }\r\n    async send(request) {\r\n        let allowRetry = true;\r\n        if (this._accessTokenFactory && (!this._accessToken || (request.url && request.url.indexOf(\"/negotiate?\") > 0))) {\r\n            // don't retry if the request is a negotiate or if we just got a potentially new token from the access token factory\r\n            allowRetry = false;\r\n            this._accessToken = await this._accessTokenFactory();\r\n        }\r\n        this._setAuthorizationHeader(request);\r\n        const response = await this._innerClient.send(request);\r\n        if (allowRetry && response.statusCode === 401 && this._accessTokenFactory) {\r\n            this._accessToken = await this._accessTokenFactory();\r\n            this._setAuthorizationHeader(request);\r\n            return await this._innerClient.send(request);\r\n        }\r\n        return response;\r\n    }\r\n    _setAuthorizationHeader(request) {\r\n        if (!request.headers) {\r\n            request.headers = {};\r\n        }\r\n        if (this._accessToken) {\r\n            request.headers[HeaderNames.Authorization] = `Bearer ${this._accessToken}`;\r\n        }\r\n        // don't remove the header if there isn't an access token factory, the user manually added the header in this case\r\n        else if (this._accessTokenFactory) {\r\n            if (request.headers[HeaderNames.Authorization]) {\r\n                delete request.headers[HeaderNames.Authorization];\r\n            }\r\n        }\r\n    }\r\n    getCookieString(url) {\r\n        return this._innerClient.getCookieString(url);\r\n    }\r\n}\r\n//# sourceMappingURL=AccessTokenHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError } from \"./Errors\";\r\nimport { FetchHttpClient } from \"./FetchHttpClient\";\r\nimport { HttpClient } from \"./HttpClient\";\r\nimport { Platform } from \"./Utils\";\r\nimport { XhrHttpClient } from \"./XhrHttpClient\";\r\n/** Default implementation of {@link @microsoft/signalr.HttpClient}. */\r\nexport class DefaultHttpClient extends HttpClient {\r\n    /** Creates a new instance of the {@link @microsoft/signalr.DefaultHttpClient}, using the provided {@link @microsoft/signalr.ILogger} to log messages. */\r\n    constructor(logger) {\r\n        super();\r\n        if (typeof fetch !== \"undefined\" || Platform.isNode) {\r\n            this._httpClient = new FetchHttpClient(logger);\r\n        }\r\n        else if (typeof XMLHttpRequest !== \"undefined\") {\r\n            this._httpClient = new XhrHttpClient(logger);\r\n        }\r\n        else {\r\n            throw new Error(\"No usable HttpClient found.\");\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n        return this._httpClient.send(request);\r\n    }\r\n    getCookieString(url) {\r\n        return this._httpClient.getCookieString(url);\r\n    }\r\n}\r\n//# sourceMappingURL=DefaultHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// 0, 2, 10, 30 second delays before reconnect attempts.\r\nconst DEFAULT_RETRY_DELAYS_IN_MILLISECONDS = [0, 2000, 10000, 30000, null];\r\n/** @private */\r\nexport class DefaultReconnectPolicy {\r\n    constructor(retryDelays) {\r\n        this._retryDelays = retryDelays !== undefined ? [...retryDelays, null] : DEFAULT_RETRY_DELAYS_IN_MILLISECONDS;\r\n    }\r\n    nextRetryDelayInMilliseconds(retryContext) {\r\n        return this._retryDelays[retryContext.previousRetryCount];\r\n    }\r\n}\r\n//# sourceMappingURL=DefaultReconnectPolicy.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Error thrown when an HTTP request fails. */\r\nexport class HttpError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.HttpError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     * @param {number} statusCode The HTTP status code represented by this error.\r\n     */\r\n    constructor(errorMessage, statusCode) {\r\n        const trueProto = new.target.prototype;\r\n        super(`${errorMessage}: Status code '${statusCode}'`);\r\n        this.statusCode = statusCode;\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when a timeout elapses. */\r\nexport class TimeoutError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.TimeoutError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage = \"A timeout occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when an action is aborted. */\r\nexport class AbortError extends Error {\r\n    /** Constructs a new instance of {@link AbortError}.\r\n     *\r\n     * @param {string} errorMessage A descriptive error message.\r\n     */\r\n    constructor(errorMessage = \"An abort occurred.\") {\r\n        const trueProto = new.target.prototype;\r\n        super(errorMessage);\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport is unsupported by the browser. */\r\n/** @private */\r\nexport class UnsupportedTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.UnsupportedTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'UnsupportedTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport is disabled by the browser. */\r\n/** @private */\r\nexport class DisabledTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.DisabledTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'DisabledTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the selected transport cannot be started. */\r\n/** @private */\r\nexport class FailedToStartTransportError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToStartTransportError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {HttpTransportType} transport The {@link @microsoft/signalr.HttpTransportType} this error occurred on.\r\n     */\r\n    constructor(message, transport) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.transport = transport;\r\n        this.errorType = 'FailedToStartTransportError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when the negotiation with the server failed to complete. */\r\n/** @private */\r\nexport class FailedToNegotiateWithServerError extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.FailedToNegotiateWithServerError}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     */\r\n    constructor(message) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.errorType = 'FailedToNegotiateWithServerError';\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n/** Error thrown when multiple errors have occurred. */\r\n/** @private */\r\nexport class AggregateErrors extends Error {\r\n    /** Constructs a new instance of {@link @microsoft/signalr.AggregateErrors}.\r\n     *\r\n     * @param {string} message A descriptive error message.\r\n     * @param {Error[]} innerErrors The collection of errors this error is aggregating.\r\n     */\r\n    constructor(message, innerErrors) {\r\n        const trueProto = new.target.prototype;\r\n        super(message);\r\n        this.innerErrors = innerErrors;\r\n        // Workaround issue in Typescript compiler\r\n        // https://github.com/Microsoft/TypeScript/issues/13965#issuecomment-278570200\r\n        this.__proto__ = trueProto;\r\n    }\r\n}\r\n//# sourceMappingURL=Errors.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { Platform, getGlobalThis, isArrayBuffer } from \"./Utils\";\r\nexport class FetchHttpClient extends HttpClient {\r\n    constructor(logger) {\r\n        super();\r\n        this._logger = logger;\r\n        // Node added a fetch implementation to the global scope starting in v18.\r\n        // We need to add a cookie jar in node to be able to share cookies with WebSocket\r\n        if (typeof fetch === \"undefined\" || Platform.isNode) {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n            this._jar = new (requireFunc(\"tough-cookie\")).CookieJar();\r\n            if (typeof fetch === \"undefined\") {\r\n                this._fetchType = requireFunc(\"node-fetch\");\r\n            }\r\n            else {\r\n                // Use fetch from Node if available\r\n                this._fetchType = fetch;\r\n            }\r\n            // node-fetch doesn't have a nice API for getting and setting cookies\r\n            // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n            this._fetchType = requireFunc(\"fetch-cookie\")(this._fetchType, this._jar);\r\n        }\r\n        else {\r\n            this._fetchType = fetch.bind(getGlobalThis());\r\n        }\r\n        if (typeof AbortController === \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n            this._abortControllerType = requireFunc(\"abort-controller\");\r\n        }\r\n        else {\r\n            this._abortControllerType = AbortController;\r\n        }\r\n    }\r\n    /** @inheritDoc */\r\n    async send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            throw new AbortError();\r\n        }\r\n        if (!request.method) {\r\n            throw new Error(\"No method defined.\");\r\n        }\r\n        if (!request.url) {\r\n            throw new Error(\"No url defined.\");\r\n        }\r\n        const abortController = new this._abortControllerType();\r\n        let error;\r\n        // Hook our abortSignal into the abort controller\r\n        if (request.abortSignal) {\r\n            request.abortSignal.onabort = () => {\r\n                abortController.abort();\r\n                error = new AbortError();\r\n            };\r\n        }\r\n        // If a timeout has been passed in, setup a timeout to call abort\r\n        // Type needs to be any to fit window.setTimeout and NodeJS.setTimeout\r\n        let timeoutId = null;\r\n        if (request.timeout) {\r\n            const msTimeout = request.timeout;\r\n            timeoutId = setTimeout(() => {\r\n                abortController.abort();\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                error = new TimeoutError();\r\n            }, msTimeout);\r\n        }\r\n        if (request.content === \"\") {\r\n            request.content = undefined;\r\n        }\r\n        if (request.content) {\r\n            // Explicitly setting the Content-Type header for React Native on Android platform.\r\n            request.headers = request.headers || {};\r\n            if (isArrayBuffer(request.content)) {\r\n                request.headers[\"Content-Type\"] = \"application/octet-stream\";\r\n            }\r\n            else {\r\n                request.headers[\"Content-Type\"] = \"text/plain;charset=UTF-8\";\r\n            }\r\n        }\r\n        let response;\r\n        try {\r\n            response = await this._fetchType(request.url, {\r\n                body: request.content,\r\n                cache: \"no-cache\",\r\n                credentials: request.withCredentials === true ? \"include\" : \"same-origin\",\r\n                headers: {\r\n                    \"X-Requested-With\": \"XMLHttpRequest\",\r\n                    ...request.headers,\r\n                },\r\n                method: request.method,\r\n                mode: \"cors\",\r\n                redirect: \"follow\",\r\n                signal: abortController.signal,\r\n            });\r\n        }\r\n        catch (e) {\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            this._logger.log(LogLevel.Warning, `Error from HTTP request. ${e}.`);\r\n            throw e;\r\n        }\r\n        finally {\r\n            if (timeoutId) {\r\n                clearTimeout(timeoutId);\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = null;\r\n            }\r\n        }\r\n        if (!response.ok) {\r\n            const errorMessage = await deserializeContent(response, \"text\");\r\n            throw new HttpError(errorMessage || response.statusText, response.status);\r\n        }\r\n        const content = deserializeContent(response, request.responseType);\r\n        const payload = await content;\r\n        return new HttpResponse(response.status, response.statusText, payload);\r\n    }\r\n    getCookieString(url) {\r\n        let cookies = \"\";\r\n        if (Platform.isNode && this._jar) {\r\n            // @ts-ignore: unused variable\r\n            this._jar.getCookies(url, (e, c) => cookies = c.join(\"; \"));\r\n        }\r\n        return cookies;\r\n    }\r\n}\r\nfunction deserializeContent(response, responseType) {\r\n    let content;\r\n    switch (responseType) {\r\n        case \"arraybuffer\":\r\n            content = response.arrayBuffer();\r\n            break;\r\n        case \"text\":\r\n            content = response.text();\r\n            break;\r\n        case \"blob\":\r\n        case \"document\":\r\n        case \"json\":\r\n            throw new Error(`${responseType} is not supported.`);\r\n        default:\r\n            content = response.text();\r\n            break;\r\n    }\r\n    return content;\r\n}\r\n//# sourceMappingURL=FetchHttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n/** @private */\r\nexport class HandshakeProtocol {\r\n    // Handshake request is always JSON\r\n    writeHandshakeRequest(handshakeRequest) {\r\n        return TextMessageFormat.write(JSON.stringify(handshakeRequest));\r\n    }\r\n    parseHandshakeResponse(data) {\r\n        let messageData;\r\n        let remainingData;\r\n        if (isArrayBuffer(data)) {\r\n            // Format is binary but still need to read JSON text from handshake response\r\n            const binaryData = new Uint8Array(data);\r\n            const separatorIndex = binaryData.indexOf(TextMessageFormat.RecordSeparatorCode);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = String.fromCharCode.apply(null, Array.prototype.slice.call(binaryData.slice(0, responseLength)));\r\n            remainingData = (binaryData.byteLength > responseLength) ? binaryData.slice(responseLength).buffer : null;\r\n        }\r\n        else {\r\n            const textData = data;\r\n            const separatorIndex = textData.indexOf(TextMessageFormat.RecordSeparator);\r\n            if (separatorIndex === -1) {\r\n                throw new Error(\"Message is incomplete.\");\r\n            }\r\n            // content before separator is handshake response\r\n            // optional content after is additional messages\r\n            const responseLength = separatorIndex + 1;\r\n            messageData = textData.substring(0, responseLength);\r\n            remainingData = (textData.length > responseLength) ? textData.substring(responseLength) : null;\r\n        }\r\n        // At this point we should have just the single handshake message\r\n        const messages = TextMessageFormat.parse(messageData);\r\n        const response = JSON.parse(messages[0]);\r\n        if (response.type) {\r\n            throw new Error(\"Expected a handshake response from the server.\");\r\n        }\r\n        const responseMessage = response;\r\n        // multiple messages could have arrived with handshake\r\n        // return additional data to be parsed as usual, or null if all parsed\r\n        return [remainingData, responseMessage];\r\n    }\r\n}\r\n//# sourceMappingURL=HandshakeProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nexport class HeaderNames {\r\n}\r\nHeaderNames.Authorization = \"Authorization\";\r\nHeaderNames.Cookie = \"Cookie\";\r\n//# sourceMappingURL=HeaderNames.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Represents an HTTP response. */\r\nexport class HttpResponse {\r\n    constructor(statusCode, statusText, content) {\r\n        this.statusCode = statusCode;\r\n        this.statusText = statusText;\r\n        this.content = content;\r\n    }\r\n}\r\n/** Abstraction over an HTTP client.\r\n *\r\n * This class provides an abstraction over an HTTP client so that a different implementation can be provided on different platforms.\r\n */\r\nexport class HttpClient {\r\n    get(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"GET\",\r\n            url,\r\n        });\r\n    }\r\n    post(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"POST\",\r\n            url,\r\n        });\r\n    }\r\n    delete(url, options) {\r\n        return this.send({\r\n            ...options,\r\n            method: \"DELETE\",\r\n            url,\r\n        });\r\n    }\r\n    /** Gets all cookies that apply to the specified URL.\r\n     *\r\n     * @param url The URL that the cookies are valid for.\r\n     * @returns {string} A string containing all the key-value cookie pairs for the specified URL.\r\n     */\r\n    // @ts-ignore\r\n    getCookieString(url) {\r\n        return \"\";\r\n    }\r\n}\r\n//# sourceMappingURL=HttpClient.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AccessTokenHttpClient } from \"./AccessTokenHttpClient\";\r\nimport { DefaultHttpClient } from \"./DefaultHttpClient\";\r\nimport { AggregateErrors, DisabledTransportError, FailedToNegotiateWithServerError, FailedToStartTransportError, HttpError, UnsupportedTransportError, AbortError } from \"./Errors\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { HttpTransportType, TransferFormat } from \"./ITransport\";\r\nimport { LongPollingTransport } from \"./LongPollingTransport\";\r\nimport { ServerSentEventsTransport } from \"./ServerSentEventsTransport\";\r\nimport { Arg, createLogger, getUserAgentHeader, Platform } from \"./Utils\";\r\nimport { WebSocketTransport } from \"./WebSocketTransport\";\r\nconst MAX_REDIRECTS = 100;\r\n/** @private */\r\nexport class HttpConnection {\r\n    constructor(url, options = {}) {\r\n        this._stopPromiseResolver = () => { };\r\n        this.features = {};\r\n        this._negotiateVersion = 1;\r\n        Arg.isRequired(url, \"url\");\r\n        this._logger = createLogger(options.logger);\r\n        this.baseUrl = this._resolveUrl(url);\r\n        options = options || {};\r\n        options.logMessageContent = options.logMessageContent === undefined ? false : options.logMessageContent;\r\n        if (typeof options.withCredentials === \"boolean\" || options.withCredentials === undefined) {\r\n            options.withCredentials = options.withCredentials === undefined ? true : options.withCredentials;\r\n        }\r\n        else {\r\n            throw new Error(\"withCredentials option was not a 'boolean' or 'undefined' value\");\r\n        }\r\n        options.timeout = options.timeout === undefined ? 100 * 1000 : options.timeout;\r\n        let webSocketModule = null;\r\n        let eventSourceModule = null;\r\n        if (Platform.isNode && typeof require !== \"undefined\") {\r\n            // In order to ignore the dynamic require in webpack builds we need to do this magic\r\n            // @ts-ignore: TS doesn't know about these names\r\n            const requireFunc = typeof __webpack_require__ === \"function\" ? __non_webpack_require__ : require;\r\n            webSocketModule = requireFunc(\"ws\");\r\n            eventSourceModule = requireFunc(\"eventsource\");\r\n        }\r\n        if (!Platform.isNode && typeof WebSocket !== \"undefined\" && !options.WebSocket) {\r\n            options.WebSocket = WebSocket;\r\n        }\r\n        else if (Platform.isNode && !options.WebSocket) {\r\n            if (webSocketModule) {\r\n                options.WebSocket = webSocketModule;\r\n            }\r\n        }\r\n        if (!Platform.isNode && typeof EventSource !== \"undefined\" && !options.EventSource) {\r\n            options.EventSource = EventSource;\r\n        }\r\n        else if (Platform.isNode && !options.EventSource) {\r\n            if (typeof eventSourceModule !== \"undefined\") {\r\n                options.EventSource = eventSourceModule;\r\n            }\r\n        }\r\n        this._httpClient = new AccessTokenHttpClient(options.httpClient || new DefaultHttpClient(this._logger), options.accessTokenFactory);\r\n        this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\r\n        this._connectionStarted = false;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async start(transferFormat) {\r\n        transferFormat = transferFormat || TransferFormat.Binary;\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Debug, `Starting connection with transfer format '${TransferFormat[transferFormat]}'.`);\r\n        if (this._connectionState !== \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n            return Promise.reject(new Error(\"Cannot start an HttpConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = \"Connecting\" /* ConnectionState.Connecting */;\r\n        this._startInternalPromise = this._startInternal(transferFormat);\r\n        await this._startInternalPromise;\r\n        // The TypeScript compiler thinks that connectionState must be Connecting here. The TypeScript compiler is wrong.\r\n        if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"Failed to start the HttpConnection before stop() was called.\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            // We cannot await stopPromise inside startInternal since stopInternal awaits the startInternalPromise.\r\n            await this._stopPromise;\r\n            return Promise.reject(new AbortError(message));\r\n        }\r\n        else if (this._connectionState !== \"Connected\" /* ConnectionState.Connected */) {\r\n            // stop() was called and transitioned the client into the Disconnecting state.\r\n            const message = \"HttpConnection.startInternal completed gracefully but didn't enter the connection into the connected state!\";\r\n            this._logger.log(LogLevel.Error, message);\r\n            return Promise.reject(new AbortError(message));\r\n        }\r\n        this._connectionStarted = true;\r\n    }\r\n    send(data) {\r\n        if (this._connectionState !== \"Connected\" /* ConnectionState.Connected */) {\r\n            return Promise.reject(new Error(\"Cannot send data if the connection is not in the 'Connected' State.\"));\r\n        }\r\n        if (!this._sendQueue) {\r\n            this._sendQueue = new TransportSendQueue(this.transport);\r\n        }\r\n        // Transport will not be null if state is connected\r\n        return this._sendQueue.send(data);\r\n    }\r\n    async stop(error) {\r\n        if (this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        this._connectionState = \"Disconnecting\" /* ConnectionState.Disconnecting */;\r\n        this._stopPromise = new Promise((resolve) => {\r\n            // Don't complete stop() until stopConnection() completes.\r\n            this._stopPromiseResolver = resolve;\r\n        });\r\n        // stopInternal should never throw so just observe it.\r\n        await this._stopInternal(error);\r\n        await this._stopPromise;\r\n    }\r\n    async _stopInternal(error) {\r\n        // Set error as soon as possible otherwise there is a race between\r\n        // the transport closing and providing an error and the error from a close message\r\n        // We would prefer the close message error.\r\n        this._stopError = error;\r\n        try {\r\n            await this._startInternalPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n        // The transport's onclose will trigger stopConnection which will run our onclose event.\r\n        // The transport should always be set if currently connected. If it wasn't set, it's likely because\r\n        // stop was called during start() and start() failed.\r\n        if (this.transport) {\r\n            try {\r\n                await this.transport.stop();\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.transport.stop() threw error '${e}'.`);\r\n                this._stopConnection();\r\n            }\r\n            this.transport = undefined;\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Debug, \"HttpConnection.transport is undefined in HttpConnection.stop() because start() failed.\");\r\n        }\r\n    }\r\n    async _startInternal(transferFormat) {\r\n        // Store the original base url and the access token factory since they may change\r\n        // as part of negotiating\r\n        let url = this.baseUrl;\r\n        this._accessTokenFactory = this._options.accessTokenFactory;\r\n        this._httpClient._accessTokenFactory = this._accessTokenFactory;\r\n        try {\r\n            if (this._options.skipNegotiation) {\r\n                if (this._options.transport === HttpTransportType.WebSockets) {\r\n                    // No need to add a connection ID in this case\r\n                    this.transport = this._constructTransport(HttpTransportType.WebSockets);\r\n                    // We should just call connect directly in this case.\r\n                    // No fallback or negotiate in this case.\r\n                    await this._startTransport(url, transferFormat);\r\n                }\r\n                else {\r\n                    throw new Error(\"Negotiation can only be skipped when using the WebSocket transport directly.\");\r\n                }\r\n            }\r\n            else {\r\n                let negotiateResponse = null;\r\n                let redirects = 0;\r\n                do {\r\n                    negotiateResponse = await this._getNegotiationResponse(url);\r\n                    // the user tries to stop the connection when it is being started\r\n                    if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */ || this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n                        throw new AbortError(\"The connection was stopped during negotiation.\");\r\n                    }\r\n                    if (negotiateResponse.error) {\r\n                        throw new Error(negotiateResponse.error);\r\n                    }\r\n                    if (negotiateResponse.ProtocolVersion) {\r\n                        throw new Error(\"Detected a connection attempt to an ASP.NET SignalR Server. This client only supports connecting to an ASP.NET Core SignalR Server. See https://aka.ms/signalr-core-differences for details.\");\r\n                    }\r\n                    if (negotiateResponse.url) {\r\n                        url = negotiateResponse.url;\r\n                    }\r\n                    if (negotiateResponse.accessToken) {\r\n                        // Replace the current access token factory with one that uses\r\n                        // the returned access token\r\n                        const accessToken = negotiateResponse.accessToken;\r\n                        this._accessTokenFactory = () => accessToken;\r\n                        // set the factory to undefined so the AccessTokenHttpClient won't retry with the same token, since we know it won't change until a connection restart\r\n                        this._httpClient._accessToken = accessToken;\r\n                        this._httpClient._accessTokenFactory = undefined;\r\n                    }\r\n                    redirects++;\r\n                } while (negotiateResponse.url && redirects < MAX_REDIRECTS);\r\n                if (redirects === MAX_REDIRECTS && negotiateResponse.url) {\r\n                    throw new Error(\"Negotiate redirection limit exceeded.\");\r\n                }\r\n                await this._createTransport(url, this._options.transport, negotiateResponse, transferFormat);\r\n            }\r\n            if (this.transport instanceof LongPollingTransport) {\r\n                this.features.inherentKeepAlive = true;\r\n            }\r\n            if (this._connectionState === \"Connecting\" /* ConnectionState.Connecting */) {\r\n                // Ensure the connection transitions to the connected state prior to completing this.startInternalPromise.\r\n                // start() will handle the case when stop was called and startInternal exits still in the disconnecting state.\r\n                this._logger.log(LogLevel.Debug, \"The HttpConnection connected successfully.\");\r\n                this._connectionState = \"Connected\" /* ConnectionState.Connected */;\r\n            }\r\n            // stop() is waiting on us via this.startInternalPromise so keep this.transport around so it can clean up.\r\n            // This is the only case startInternal can exit in neither the connected nor disconnected state because stopConnection()\r\n            // will transition to the disconnected state. start() will wait for the transition using the stopPromise.\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Error, \"Failed to start the connection: \" + e);\r\n            this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\r\n            this.transport = undefined;\r\n            // if start fails, any active calls to stop assume that start will complete the stop promise\r\n            this._stopPromiseResolver();\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _getNegotiationResponse(url) {\r\n        const headers = {};\r\n        const [name, value] = getUserAgentHeader();\r\n        headers[name] = value;\r\n        const negotiateUrl = this._resolveNegotiateUrl(url);\r\n        this._logger.log(LogLevel.Debug, `Sending negotiation request: ${negotiateUrl}.`);\r\n        try {\r\n            const response = await this._httpClient.post(negotiateUrl, {\r\n                content: \"\",\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            });\r\n            if (response.statusCode !== 200) {\r\n                return Promise.reject(new Error(`Unexpected status code returned from negotiate '${response.statusCode}'`));\r\n            }\r\n            const negotiateResponse = JSON.parse(response.content);\r\n            if (!negotiateResponse.negotiateVersion || negotiateResponse.negotiateVersion < 1) {\r\n                // Negotiate version 0 doesn't use connectionToken\r\n                // So we set it equal to connectionId so all our logic can use connectionToken without being aware of the negotiate version\r\n                negotiateResponse.connectionToken = negotiateResponse.connectionId;\r\n            }\r\n            if (negotiateResponse.useStatefulReconnect && this._options._useStatefulReconnect !== true) {\r\n                return Promise.reject(new FailedToNegotiateWithServerError(\"Client didn't negotiate Stateful Reconnect but the server did.\"));\r\n            }\r\n            return negotiateResponse;\r\n        }\r\n        catch (e) {\r\n            let errorMessage = \"Failed to complete negotiation with the server: \" + e;\r\n            if (e instanceof HttpError) {\r\n                if (e.statusCode === 404) {\r\n                    errorMessage = errorMessage + \" Either this is not a SignalR endpoint or there is a proxy blocking the connection.\";\r\n                }\r\n            }\r\n            this._logger.log(LogLevel.Error, errorMessage);\r\n            return Promise.reject(new FailedToNegotiateWithServerError(errorMessage));\r\n        }\r\n    }\r\n    _createConnectUrl(url, connectionToken) {\r\n        if (!connectionToken) {\r\n            return url;\r\n        }\r\n        return url + (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + `id=${connectionToken}`;\r\n    }\r\n    async _createTransport(url, requestedTransport, negotiateResponse, requestedTransferFormat) {\r\n        let connectUrl = this._createConnectUrl(url, negotiateResponse.connectionToken);\r\n        if (this._isITransport(requestedTransport)) {\r\n            this._logger.log(LogLevel.Debug, \"Connection was provided an instance of ITransport, using that directly.\");\r\n            this.transport = requestedTransport;\r\n            await this._startTransport(connectUrl, requestedTransferFormat);\r\n            this.connectionId = negotiateResponse.connectionId;\r\n            return;\r\n        }\r\n        const transportExceptions = [];\r\n        const transports = negotiateResponse.availableTransports || [];\r\n        let negotiate = negotiateResponse;\r\n        for (const endpoint of transports) {\r\n            const transportOrError = this._resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, (negotiate === null || negotiate === void 0 ? void 0 : negotiate.useStatefulReconnect) === true);\r\n            if (transportOrError instanceof Error) {\r\n                // Store the error and continue, we don't want to cause a re-negotiate in these cases\r\n                transportExceptions.push(`${endpoint.transport} failed:`);\r\n                transportExceptions.push(transportOrError);\r\n            }\r\n            else if (this._isITransport(transportOrError)) {\r\n                this.transport = transportOrError;\r\n                if (!negotiate) {\r\n                    try {\r\n                        negotiate = await this._getNegotiationResponse(url);\r\n                    }\r\n                    catch (ex) {\r\n                        return Promise.reject(ex);\r\n                    }\r\n                    connectUrl = this._createConnectUrl(url, negotiate.connectionToken);\r\n                }\r\n                try {\r\n                    await this._startTransport(connectUrl, requestedTransferFormat);\r\n                    this.connectionId = negotiate.connectionId;\r\n                    return;\r\n                }\r\n                catch (ex) {\r\n                    this._logger.log(LogLevel.Error, `Failed to start the transport '${endpoint.transport}': ${ex}`);\r\n                    negotiate = undefined;\r\n                    transportExceptions.push(new FailedToStartTransportError(`${endpoint.transport} failed: ${ex}`, HttpTransportType[endpoint.transport]));\r\n                    if (this._connectionState !== \"Connecting\" /* ConnectionState.Connecting */) {\r\n                        const message = \"Failed to select transport before stop() was called.\";\r\n                        this._logger.log(LogLevel.Debug, message);\r\n                        return Promise.reject(new AbortError(message));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (transportExceptions.length > 0) {\r\n            return Promise.reject(new AggregateErrors(`Unable to connect to the server with any of the available transports. ${transportExceptions.join(\" \")}`, transportExceptions));\r\n        }\r\n        return Promise.reject(new Error(\"None of the transports supported by the client are supported by the server.\"));\r\n    }\r\n    _constructTransport(transport) {\r\n        switch (transport) {\r\n            case HttpTransportType.WebSockets:\r\n                if (!this._options.WebSocket) {\r\n                    throw new Error(\"'WebSocket' is not supported in your environment.\");\r\n                }\r\n                return new WebSocketTransport(this._httpClient, this._accessTokenFactory, this._logger, this._options.logMessageContent, this._options.WebSocket, this._options.headers || {});\r\n            case HttpTransportType.ServerSentEvents:\r\n                if (!this._options.EventSource) {\r\n                    throw new Error(\"'EventSource' is not supported in your environment.\");\r\n                }\r\n                return new ServerSentEventsTransport(this._httpClient, this._httpClient._accessToken, this._logger, this._options);\r\n            case HttpTransportType.LongPolling:\r\n                return new LongPollingTransport(this._httpClient, this._logger, this._options);\r\n            default:\r\n                throw new Error(`Unknown transport: ${transport}.`);\r\n        }\r\n    }\r\n    _startTransport(url, transferFormat) {\r\n        this.transport.onreceive = this.onreceive;\r\n        if (this.features.reconnect) {\r\n            this.transport.onclose = async (e) => {\r\n                let callStop = false;\r\n                if (this.features.reconnect) {\r\n                    try {\r\n                        this.features.disconnected();\r\n                        await this.transport.connect(url, transferFormat);\r\n                        await this.features.resend();\r\n                    }\r\n                    catch {\r\n                        callStop = true;\r\n                    }\r\n                }\r\n                else {\r\n                    this._stopConnection(e);\r\n                    return;\r\n                }\r\n                if (callStop) {\r\n                    this._stopConnection(e);\r\n                }\r\n            };\r\n        }\r\n        else {\r\n            this.transport.onclose = (e) => this._stopConnection(e);\r\n        }\r\n        return this.transport.connect(url, transferFormat);\r\n    }\r\n    _resolveTransportOrError(endpoint, requestedTransport, requestedTransferFormat, useStatefulReconnect) {\r\n        const transport = HttpTransportType[endpoint.transport];\r\n        if (transport === null || transport === undefined) {\r\n            this._logger.log(LogLevel.Debug, `Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n            return new Error(`Skipping transport '${endpoint.transport}' because it is not supported by this client.`);\r\n        }\r\n        else {\r\n            if (transportMatches(requestedTransport, transport)) {\r\n                const transferFormats = endpoint.transferFormats.map((s) => TransferFormat[s]);\r\n                if (transferFormats.indexOf(requestedTransferFormat) >= 0) {\r\n                    if ((transport === HttpTransportType.WebSockets && !this._options.WebSocket) ||\r\n                        (transport === HttpTransportType.ServerSentEvents && !this._options.EventSource)) {\r\n                        this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it is not supported in your environment.'`);\r\n                        return new UnsupportedTransportError(`'${HttpTransportType[transport]}' is not supported in your environment.`, transport);\r\n                    }\r\n                    else {\r\n                        this._logger.log(LogLevel.Debug, `Selecting transport '${HttpTransportType[transport]}'.`);\r\n                        try {\r\n                            this.features.reconnect = transport === HttpTransportType.WebSockets ? useStatefulReconnect : undefined;\r\n                            return this._constructTransport(transport);\r\n                        }\r\n                        catch (ex) {\r\n                            return ex;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it does not support the requested transfer format '${TransferFormat[requestedTransferFormat]}'.`);\r\n                    return new Error(`'${HttpTransportType[transport]}' does not support ${TransferFormat[requestedTransferFormat]}.`);\r\n                }\r\n            }\r\n            else {\r\n                this._logger.log(LogLevel.Debug, `Skipping transport '${HttpTransportType[transport]}' because it was disabled by the client.`);\r\n                return new DisabledTransportError(`'${HttpTransportType[transport]}' is disabled by the client.`, transport);\r\n            }\r\n        }\r\n    }\r\n    _isITransport(transport) {\r\n        return transport && typeof (transport) === \"object\" && \"connect\" in transport;\r\n    }\r\n    _stopConnection(error) {\r\n        this._logger.log(LogLevel.Debug, `HttpConnection.stopConnection(${error}) called while in state ${this._connectionState}.`);\r\n        this.transport = undefined;\r\n        // If we have a stopError, it takes precedence over the error from the transport\r\n        error = this._stopError || error;\r\n        this._stopError = undefined;\r\n        if (this._connectionState === \"Disconnected\" /* ConnectionState.Disconnected */) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is already in the disconnected state.`);\r\n            return;\r\n        }\r\n        if (this._connectionState === \"Connecting\" /* ConnectionState.Connecting */) {\r\n            this._logger.log(LogLevel.Warning, `Call to HttpConnection.stopConnection(${error}) was ignored because the connection is still in the connecting state.`);\r\n            throw new Error(`HttpConnection.stopConnection(${error}) was called while the connection is still in the connecting state.`);\r\n        }\r\n        if (this._connectionState === \"Disconnecting\" /* ConnectionState.Disconnecting */) {\r\n            // A call to stop() induced this call to stopConnection and needs to be completed.\r\n            // Any stop() awaiters will be scheduled to continue after the onclose callback fires.\r\n            this._stopPromiseResolver();\r\n        }\r\n        if (error) {\r\n            this._logger.log(LogLevel.Error, `Connection disconnected with error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Information, \"Connection disconnected.\");\r\n        }\r\n        if (this._sendQueue) {\r\n            this._sendQueue.stop().catch((e) => {\r\n                this._logger.log(LogLevel.Error, `TransportSendQueue.stop() threw error '${e}'.`);\r\n            });\r\n            this._sendQueue = undefined;\r\n        }\r\n        this.connectionId = undefined;\r\n        this._connectionState = \"Disconnected\" /* ConnectionState.Disconnected */;\r\n        if (this._connectionStarted) {\r\n            this._connectionStarted = false;\r\n            try {\r\n                if (this.onclose) {\r\n                    this.onclose(error);\r\n                }\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `HttpConnection.onclose(${error}) threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    _resolveUrl(url) {\r\n        // startsWith is not supported in IE\r\n        if (url.lastIndexOf(\"https://\", 0) === 0 || url.lastIndexOf(\"http://\", 0) === 0) {\r\n            return url;\r\n        }\r\n        if (!Platform.isBrowser) {\r\n            throw new Error(`Cannot resolve '${url}'.`);\r\n        }\r\n        // Setting the url to the href propery of an anchor tag handles normalization\r\n        // for us. There are 3 main cases.\r\n        // 1. Relative path normalization e.g \"b\" -> \"http://localhost:5000/a/b\"\r\n        // 2. Absolute path normalization e.g \"/a/b\" -> \"http://localhost:5000/a/b\"\r\n        // 3. Networkpath reference normalization e.g \"//localhost:5000/a/b\" -> \"http://localhost:5000/a/b\"\r\n        const aTag = window.document.createElement(\"a\");\r\n        aTag.href = url;\r\n        this._logger.log(LogLevel.Information, `Normalizing '${url}' to '${aTag.href}'.`);\r\n        return aTag.href;\r\n    }\r\n    _resolveNegotiateUrl(url) {\r\n        const negotiateUrl = new URL(url);\r\n        if (negotiateUrl.pathname.endsWith('/')) {\r\n            negotiateUrl.pathname += \"negotiate\";\r\n        }\r\n        else {\r\n            negotiateUrl.pathname += \"/negotiate\";\r\n        }\r\n        const searchParams = new URLSearchParams(negotiateUrl.searchParams);\r\n        if (!searchParams.has(\"negotiateVersion\")) {\r\n            searchParams.append(\"negotiateVersion\", this._negotiateVersion.toString());\r\n        }\r\n        if (searchParams.has(\"useStatefulReconnect\")) {\r\n            if (searchParams.get(\"useStatefulReconnect\") === \"true\") {\r\n                this._options._useStatefulReconnect = true;\r\n            }\r\n        }\r\n        else if (this._options._useStatefulReconnect === true) {\r\n            searchParams.append(\"useStatefulReconnect\", \"true\");\r\n        }\r\n        negotiateUrl.search = searchParams.toString();\r\n        return negotiateUrl.toString();\r\n    }\r\n}\r\nfunction transportMatches(requestedTransport, actualTransport) {\r\n    return !requestedTransport || ((actualTransport & requestedTransport) !== 0);\r\n}\r\n/** @private */\r\nexport class TransportSendQueue {\r\n    constructor(_transport) {\r\n        this._transport = _transport;\r\n        this._buffer = [];\r\n        this._executing = true;\r\n        this._sendBufferedData = new PromiseSource();\r\n        this._transportResult = new PromiseSource();\r\n        this._sendLoopPromise = this._sendLoop();\r\n    }\r\n    send(data) {\r\n        this._bufferData(data);\r\n        if (!this._transportResult) {\r\n            this._transportResult = new PromiseSource();\r\n        }\r\n        return this._transportResult.promise;\r\n    }\r\n    stop() {\r\n        this._executing = false;\r\n        this._sendBufferedData.resolve();\r\n        return this._sendLoopPromise;\r\n    }\r\n    _bufferData(data) {\r\n        if (this._buffer.length && typeof (this._buffer[0]) !== typeof (data)) {\r\n            throw new Error(`Expected data to be of type ${typeof (this._buffer)} but was of type ${typeof (data)}`);\r\n        }\r\n        this._buffer.push(data);\r\n        this._sendBufferedData.resolve();\r\n    }\r\n    async _sendLoop() {\r\n        while (true) {\r\n            await this._sendBufferedData.promise;\r\n            if (!this._executing) {\r\n                if (this._transportResult) {\r\n                    this._transportResult.reject(\"Connection stopped.\");\r\n                }\r\n                break;\r\n            }\r\n            this._sendBufferedData = new PromiseSource();\r\n            const transportResult = this._transportResult;\r\n            this._transportResult = undefined;\r\n            const data = typeof (this._buffer[0]) === \"string\" ?\r\n                this._buffer.join(\"\") :\r\n                TransportSendQueue._concatBuffers(this._buffer);\r\n            this._buffer.length = 0;\r\n            try {\r\n                await this._transport.send(data);\r\n                transportResult.resolve();\r\n            }\r\n            catch (error) {\r\n                transportResult.reject(error);\r\n            }\r\n        }\r\n    }\r\n    static _concatBuffers(arrayBuffers) {\r\n        const totalLength = arrayBuffers.map((b) => b.byteLength).reduce((a, b) => a + b);\r\n        const result = new Uint8Array(totalLength);\r\n        let offset = 0;\r\n        for (const item of arrayBuffers) {\r\n            result.set(new Uint8Array(item), offset);\r\n            offset += item.byteLength;\r\n        }\r\n        return result.buffer;\r\n    }\r\n}\r\nclass PromiseSource {\r\n    constructor() {\r\n        this.promise = new Promise((resolve, reject) => [this._resolver, this._rejecter] = [resolve, reject]);\r\n    }\r\n    resolve() {\r\n        this._resolver();\r\n    }\r\n    reject(reason) {\r\n        this._rejecter(reason);\r\n    }\r\n}\r\n//# sourceMappingURL=HttpConnection.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HandshakeProtocol } from \"./HandshakeProtocol\";\r\nimport { AbortError } from \"./Errors\";\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { Subject } from \"./Subject\";\r\nimport { Arg, getErrorString, Platform } from \"./Utils\";\r\nimport { MessageBuffer } from \"./MessageBuffer\";\r\nconst DEFAULT_TIMEOUT_IN_MS = 30 * 1000;\r\nconst DEFAULT_PING_INTERVAL_IN_MS = 15 * 1000;\r\nconst DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE = 100000;\r\n/** Describes the current state of the {@link HubConnection} to the server. */\r\nexport var HubConnectionState;\r\n(function (HubConnectionState) {\r\n    /** The hub connection is disconnected. */\r\n    HubConnectionState[\"Disconnected\"] = \"Disconnected\";\r\n    /** The hub connection is connecting. */\r\n    HubConnectionState[\"Connecting\"] = \"Connecting\";\r\n    /** The hub connection is connected. */\r\n    HubConnectionState[\"Connected\"] = \"Connected\";\r\n    /** The hub connection is disconnecting. */\r\n    HubConnectionState[\"Disconnecting\"] = \"Disconnecting\";\r\n    /** The hub connection is reconnecting. */\r\n    HubConnectionState[\"Reconnecting\"] = \"Reconnecting\";\r\n})(HubConnectionState || (HubConnectionState = {}));\r\n/** Represents a connection to a SignalR Hub. */\r\nexport class HubConnection {\r\n    /** @internal */\r\n    // Using a public static factory method means we can have a private constructor and an _internal_\r\n    // create method that can be used by HubConnectionBuilder. An \"internal\" constructor would just\r\n    // be stripped away and the '.d.ts' file would have no constructor, which is interpreted as a\r\n    // public parameter-less constructor.\r\n    static create(connection, logger, protocol, reconnectPolicy, serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize) {\r\n        return new HubConnection(connection, logger, protocol, reconnectPolicy, serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize);\r\n    }\r\n    constructor(connection, logger, protocol, reconnectPolicy, serverTimeoutInMilliseconds, keepAliveIntervalInMilliseconds, statefulReconnectBufferSize) {\r\n        this._nextKeepAlive = 0;\r\n        this._freezeEventListener = () => {\r\n            this._logger.log(LogLevel.Warning, \"The page is being frozen, this will likely lead to the connection being closed and messages being lost. For more information see the docs at https://learn.microsoft.com/aspnet/core/signalr/javascript-client#bsleep\");\r\n        };\r\n        Arg.isRequired(connection, \"connection\");\r\n        Arg.isRequired(logger, \"logger\");\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.serverTimeoutInMilliseconds = serverTimeoutInMilliseconds !== null && serverTimeoutInMilliseconds !== void 0 ? serverTimeoutInMilliseconds : DEFAULT_TIMEOUT_IN_MS;\r\n        this.keepAliveIntervalInMilliseconds = keepAliveIntervalInMilliseconds !== null && keepAliveIntervalInMilliseconds !== void 0 ? keepAliveIntervalInMilliseconds : DEFAULT_PING_INTERVAL_IN_MS;\r\n        this._statefulReconnectBufferSize = statefulReconnectBufferSize !== null && statefulReconnectBufferSize !== void 0 ? statefulReconnectBufferSize : DEFAULT_STATEFUL_RECONNECT_BUFFER_SIZE;\r\n        this._logger = logger;\r\n        this._protocol = protocol;\r\n        this.connection = connection;\r\n        this._reconnectPolicy = reconnectPolicy;\r\n        this._handshakeProtocol = new HandshakeProtocol();\r\n        this.connection.onreceive = (data) => this._processIncomingData(data);\r\n        this.connection.onclose = (error) => this._connectionClosed(error);\r\n        this._callbacks = {};\r\n        this._methods = {};\r\n        this._closedCallbacks = [];\r\n        this._reconnectingCallbacks = [];\r\n        this._reconnectedCallbacks = [];\r\n        this._invocationId = 0;\r\n        this._receivedHandshakeResponse = false;\r\n        this._connectionState = HubConnectionState.Disconnected;\r\n        this._connectionStarted = false;\r\n        this._cachedPingMessage = this._protocol.writeMessage({ type: MessageType.Ping });\r\n    }\r\n    /** Indicates the state of the {@link HubConnection} to the server. */\r\n    get state() {\r\n        return this._connectionState;\r\n    }\r\n    /** Represents the connection id of the {@link HubConnection} on the server. The connection id will be null when the connection is either\r\n     *  in the disconnected state or if the negotiation step was skipped.\r\n     */\r\n    get connectionId() {\r\n        return this.connection ? (this.connection.connectionId || null) : null;\r\n    }\r\n    /** Indicates the url of the {@link HubConnection} to the server. */\r\n    get baseUrl() {\r\n        return this.connection.baseUrl || \"\";\r\n    }\r\n    /**\r\n     * Sets a new url for the HubConnection. Note that the url can only be changed when the connection is in either the Disconnected or\r\n     * Reconnecting states.\r\n     * @param {string} url The url to connect to.\r\n     */\r\n    set baseUrl(url) {\r\n        if (this._connectionState !== HubConnectionState.Disconnected && this._connectionState !== HubConnectionState.Reconnecting) {\r\n            throw new Error(\"The HubConnection must be in the Disconnected or Reconnecting state to change the url.\");\r\n        }\r\n        if (!url) {\r\n            throw new Error(\"The HubConnection url must be a valid url.\");\r\n        }\r\n        this.connection.baseUrl = url;\r\n    }\r\n    /** Starts the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully established, or rejects with an error.\r\n     */\r\n    start() {\r\n        this._startPromise = this._startWithStateTransitions();\r\n        return this._startPromise;\r\n    }\r\n    async _startWithStateTransitions() {\r\n        if (this._connectionState !== HubConnectionState.Disconnected) {\r\n            return Promise.reject(new Error(\"Cannot start a HubConnection that is not in the 'Disconnected' state.\"));\r\n        }\r\n        this._connectionState = HubConnectionState.Connecting;\r\n        this._logger.log(LogLevel.Debug, \"Starting HubConnection.\");\r\n        try {\r\n            await this._startInternal();\r\n            if (Platform.isBrowser) {\r\n                // Log when the browser freezes the tab so users know why their connection unexpectedly stopped working\r\n                window.document.addEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n            this._connectionState = HubConnectionState.Connected;\r\n            this._connectionStarted = true;\r\n            this._logger.log(LogLevel.Debug, \"HubConnection connected successfully.\");\r\n        }\r\n        catch (e) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._logger.log(LogLevel.Debug, `HubConnection failed to start successfully because of error '${e}'.`);\r\n            return Promise.reject(e);\r\n        }\r\n    }\r\n    async _startInternal() {\r\n        this._stopDuringStartError = undefined;\r\n        this._receivedHandshakeResponse = false;\r\n        // Set up the promise before any connection is (re)started otherwise it could race with received messages\r\n        const handshakePromise = new Promise((resolve, reject) => {\r\n            this._handshakeResolver = resolve;\r\n            this._handshakeRejecter = reject;\r\n        });\r\n        await this.connection.start(this._protocol.transferFormat);\r\n        try {\r\n            let version = this._protocol.version;\r\n            if (!this.connection.features.reconnect) {\r\n                // Stateful Reconnect starts with HubProtocol version 2, newer clients connecting to older servers will fail to connect due to\r\n                // the handshake only supporting version 1, so we will try to send version 1 during the handshake to keep old servers working.\r\n                version = 1;\r\n            }\r\n            const handshakeRequest = {\r\n                protocol: this._protocol.name,\r\n                version,\r\n            };\r\n            this._logger.log(LogLevel.Debug, \"Sending handshake request.\");\r\n            await this._sendMessage(this._handshakeProtocol.writeHandshakeRequest(handshakeRequest));\r\n            this._logger.log(LogLevel.Information, `Using HubProtocol '${this._protocol.name}'.`);\r\n            // defensively cleanup timeout in case we receive a message from the server before we finish start\r\n            this._cleanupTimeout();\r\n            this._resetTimeoutPeriod();\r\n            this._resetKeepAliveInterval();\r\n            await handshakePromise;\r\n            // It's important to check the stopDuringStartError instead of just relying on the handshakePromise\r\n            // being rejected on close, because this continuation can run after both the handshake completed successfully\r\n            // and the connection was closed.\r\n            if (this._stopDuringStartError) {\r\n                // It's important to throw instead of returning a rejected promise, because we don't want to allow any state\r\n                // transitions to occur between now and the calling code observing the exceptions. Returning a rejected promise\r\n                // will cause the calling continuation to get scheduled to run later.\r\n                // eslint-disable-next-line @typescript-eslint/no-throw-literal\r\n                throw this._stopDuringStartError;\r\n            }\r\n            const useStatefulReconnect = this.connection.features.reconnect || false;\r\n            if (useStatefulReconnect) {\r\n                this._messageBuffer = new MessageBuffer(this._protocol, this.connection, this._statefulReconnectBufferSize);\r\n                this.connection.features.disconnected = this._messageBuffer._disconnected.bind(this._messageBuffer);\r\n                this.connection.features.resend = () => {\r\n                    if (this._messageBuffer) {\r\n                        return this._messageBuffer._resend();\r\n                    }\r\n                };\r\n            }\r\n            if (!this.connection.features.inherentKeepAlive) {\r\n                await this._sendMessage(this._cachedPingMessage);\r\n            }\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Debug, `Hub handshake failed with error '${e}' during start(). Stopping HubConnection.`);\r\n            this._cleanupTimeout();\r\n            this._cleanupPingTimer();\r\n            // HttpConnection.stop() should not complete until after the onclose callback is invoked.\r\n            // This will transition the HubConnection to the disconnected state before HttpConnection.stop() completes.\r\n            await this.connection.stop(e);\r\n            throw e;\r\n        }\r\n    }\r\n    /** Stops the connection.\r\n     *\r\n     * @returns {Promise<void>} A Promise that resolves when the connection has been successfully terminated, or rejects with an error.\r\n     */\r\n    async stop() {\r\n        // Capture the start promise before the connection might be restarted in an onclose callback.\r\n        const startPromise = this._startPromise;\r\n        this.connection.features.reconnect = false;\r\n        this._stopPromise = this._stopInternal();\r\n        await this._stopPromise;\r\n        try {\r\n            // Awaiting undefined continues immediately\r\n            await startPromise;\r\n        }\r\n        catch (e) {\r\n            // This exception is returned to the user as a rejected Promise from the start method.\r\n        }\r\n    }\r\n    _stopInternal(error) {\r\n        if (this._connectionState === HubConnectionState.Disconnected) {\r\n            this._logger.log(LogLevel.Debug, `Call to HubConnection.stop(${error}) ignored because it is already in the disconnected state.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._logger.log(LogLevel.Debug, `Call to HttpConnection.stop(${error}) ignored because the connection is already in the disconnecting state.`);\r\n            return this._stopPromise;\r\n        }\r\n        const state = this._connectionState;\r\n        this._connectionState = HubConnectionState.Disconnecting;\r\n        this._logger.log(LogLevel.Debug, \"Stopping HubConnection.\");\r\n        if (this._reconnectDelayHandle) {\r\n            // We're in a reconnect delay which means the underlying connection is currently already stopped.\r\n            // Just clear the handle to stop the reconnect loop (which no one is waiting on thankfully) and\r\n            // fire the onclose callbacks.\r\n            this._logger.log(LogLevel.Debug, \"Connection stopped during reconnect delay. Done reconnecting.\");\r\n            clearTimeout(this._reconnectDelayHandle);\r\n            this._reconnectDelayHandle = undefined;\r\n            this._completeClose();\r\n            return Promise.resolve();\r\n        }\r\n        if (state === HubConnectionState.Connected) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._sendCloseMessage();\r\n        }\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        this._stopDuringStartError = error || new AbortError(\"The connection was stopped before the hub handshake could complete.\");\r\n        // HttpConnection.stop() should not complete until after either HttpConnection.start() fails\r\n        // or the onclose callback is invoked. The onclose callback will transition the HubConnection\r\n        // to the disconnected state if need be before HttpConnection.stop() completes.\r\n        return this.connection.stop(error);\r\n    }\r\n    async _sendCloseMessage() {\r\n        try {\r\n            await this._sendWithProtocol(this._createCloseMessage());\r\n        }\r\n        catch {\r\n            // Ignore, this is a best effort attempt to let the server know the client closed gracefully.\r\n        }\r\n    }\r\n    /** Invokes a streaming hub method on the server using the specified name and arguments.\r\n     *\r\n     * @typeparam T The type of the items returned by the server.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {IStreamResult<T>} An object that yields results from the server as they are received.\r\n     */\r\n    stream(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createStreamInvocation(methodName, args, streamIds);\r\n        // eslint-disable-next-line prefer-const\r\n        let promiseQueue;\r\n        const subject = new Subject();\r\n        subject.cancelCallback = () => {\r\n            const cancelInvocation = this._createCancelInvocation(invocationDescriptor.invocationId);\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n            return promiseQueue.then(() => {\r\n                return this._sendWithProtocol(cancelInvocation);\r\n            });\r\n        };\r\n        this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\r\n            if (error) {\r\n                subject.error(error);\r\n                return;\r\n            }\r\n            else if (invocationEvent) {\r\n                // invocationEvent will not be null when an error is not passed to the callback\r\n                if (invocationEvent.type === MessageType.Completion) {\r\n                    if (invocationEvent.error) {\r\n                        subject.error(new Error(invocationEvent.error));\r\n                    }\r\n                    else {\r\n                        subject.complete();\r\n                    }\r\n                }\r\n                else {\r\n                    subject.next((invocationEvent.item));\r\n                }\r\n            }\r\n        };\r\n        promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n            .catch((e) => {\r\n            subject.error(e);\r\n            delete this._callbacks[invocationDescriptor.invocationId];\r\n        });\r\n        this._launchStreams(streams, promiseQueue);\r\n        return subject;\r\n    }\r\n    _sendMessage(message) {\r\n        this._resetKeepAliveInterval();\r\n        return this.connection.send(message);\r\n    }\r\n    /**\r\n     * Sends a js object to the server.\r\n     * @param message The js object to serialize and send.\r\n     */\r\n    _sendWithProtocol(message) {\r\n        if (this._messageBuffer) {\r\n            return this._messageBuffer._send(message);\r\n        }\r\n        else {\r\n            return this._sendMessage(this._protocol.writeMessage(message));\r\n        }\r\n    }\r\n    /** Invokes a hub method on the server using the specified name and arguments. Does not wait for a response from the receiver.\r\n     *\r\n     * The Promise returned by this method resolves when the client has sent the invocation to the server. The server may still\r\n     * be processing the invocation.\r\n     *\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<void>} A Promise that resolves when the invocation has been successfully sent, or rejects with an error.\r\n     */\r\n    send(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const sendPromise = this._sendWithProtocol(this._createInvocation(methodName, args, true, streamIds));\r\n        this._launchStreams(streams, sendPromise);\r\n        return sendPromise;\r\n    }\r\n    /** Invokes a hub method on the server using the specified name and arguments.\r\n     *\r\n     * The Promise returned by this method resolves when the server indicates it has finished invoking the method. When the promise\r\n     * resolves, the server has finished invoking the method. If the server method returns a result, it is produced as the result of\r\n     * resolving the Promise.\r\n     *\r\n     * @typeparam T The expected return type.\r\n     * @param {string} methodName The name of the server method to invoke.\r\n     * @param {any[]} args The arguments used to invoke the server method.\r\n     * @returns {Promise<T>} A Promise that resolves with the result of the server method (if any), or rejects with an error.\r\n     */\r\n    invoke(methodName, ...args) {\r\n        const [streams, streamIds] = this._replaceStreamingParams(args);\r\n        const invocationDescriptor = this._createInvocation(methodName, args, false, streamIds);\r\n        const p = new Promise((resolve, reject) => {\r\n            // invocationId will always have a value for a non-blocking invocation\r\n            this._callbacks[invocationDescriptor.invocationId] = (invocationEvent, error) => {\r\n                if (error) {\r\n                    reject(error);\r\n                    return;\r\n                }\r\n                else if (invocationEvent) {\r\n                    // invocationEvent will not be null when an error is not passed to the callback\r\n                    if (invocationEvent.type === MessageType.Completion) {\r\n                        if (invocationEvent.error) {\r\n                            reject(new Error(invocationEvent.error));\r\n                        }\r\n                        else {\r\n                            resolve(invocationEvent.result);\r\n                        }\r\n                    }\r\n                    else {\r\n                        reject(new Error(`Unexpected message type: ${invocationEvent.type}`));\r\n                    }\r\n                }\r\n            };\r\n            const promiseQueue = this._sendWithProtocol(invocationDescriptor)\r\n                .catch((e) => {\r\n                reject(e);\r\n                // invocationId will always have a value for a non-blocking invocation\r\n                delete this._callbacks[invocationDescriptor.invocationId];\r\n            });\r\n            this._launchStreams(streams, promiseQueue);\r\n        });\r\n        return p;\r\n    }\r\n    on(methodName, newMethod) {\r\n        if (!methodName || !newMethod) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        if (!this._methods[methodName]) {\r\n            this._methods[methodName] = [];\r\n        }\r\n        // Preventing adding the same handler multiple times.\r\n        if (this._methods[methodName].indexOf(newMethod) !== -1) {\r\n            return;\r\n        }\r\n        this._methods[methodName].push(newMethod);\r\n    }\r\n    off(methodName, method) {\r\n        if (!methodName) {\r\n            return;\r\n        }\r\n        methodName = methodName.toLowerCase();\r\n        const handlers = this._methods[methodName];\r\n        if (!handlers) {\r\n            return;\r\n        }\r\n        if (method) {\r\n            const removeIdx = handlers.indexOf(method);\r\n            if (removeIdx !== -1) {\r\n                handlers.splice(removeIdx, 1);\r\n                if (handlers.length === 0) {\r\n                    delete this._methods[methodName];\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            delete this._methods[methodName];\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection is closed.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection is closed. Optionally receives a single argument containing the error that caused the connection to close (if any).\r\n     */\r\n    onclose(callback) {\r\n        if (callback) {\r\n            this._closedCallbacks.push(callback);\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection starts reconnecting.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection starts reconnecting. Optionally receives a single argument containing the error that caused the connection to start reconnecting (if any).\r\n     */\r\n    onreconnecting(callback) {\r\n        if (callback) {\r\n            this._reconnectingCallbacks.push(callback);\r\n        }\r\n    }\r\n    /** Registers a handler that will be invoked when the connection successfully reconnects.\r\n     *\r\n     * @param {Function} callback The handler that will be invoked when the connection successfully reconnects.\r\n     */\r\n    onreconnected(callback) {\r\n        if (callback) {\r\n            this._reconnectedCallbacks.push(callback);\r\n        }\r\n    }\r\n    _processIncomingData(data) {\r\n        this._cleanupTimeout();\r\n        if (!this._receivedHandshakeResponse) {\r\n            data = this._processHandshakeResponse(data);\r\n            this._receivedHandshakeResponse = true;\r\n        }\r\n        // Data may have all been read when processing handshake response\r\n        if (data) {\r\n            // Parse the messages\r\n            const messages = this._protocol.parseMessages(data, this._logger);\r\n            for (const message of messages) {\r\n                if (this._messageBuffer && !this._messageBuffer._shouldProcessMessage(message)) {\r\n                    // Don't process the message, we are either waiting for a SequenceMessage or received a duplicate message\r\n                    continue;\r\n                }\r\n                switch (message.type) {\r\n                    case MessageType.Invocation:\r\n                        this._invokeClientMethod(message)\r\n                            .catch((e) => {\r\n                            this._logger.log(LogLevel.Error, `Invoke client method threw error: ${getErrorString(e)}`);\r\n                        });\r\n                        break;\r\n                    case MessageType.StreamItem:\r\n                    case MessageType.Completion: {\r\n                        const callback = this._callbacks[message.invocationId];\r\n                        if (callback) {\r\n                            if (message.type === MessageType.Completion) {\r\n                                delete this._callbacks[message.invocationId];\r\n                            }\r\n                            try {\r\n                                callback(message);\r\n                            }\r\n                            catch (e) {\r\n                                this._logger.log(LogLevel.Error, `Stream callback threw error: ${getErrorString(e)}`);\r\n                            }\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ping:\r\n                        // Don't care about pings\r\n                        break;\r\n                    case MessageType.Close: {\r\n                        this._logger.log(LogLevel.Information, \"Close message received from server.\");\r\n                        const error = message.error ? new Error(\"Server returned an error on close: \" + message.error) : undefined;\r\n                        if (message.allowReconnect === true) {\r\n                            // It feels wrong not to await connection.stop() here, but processIncomingData is called as part of an onreceive callback which is not async,\r\n                            // this is already the behavior for serverTimeout(), and HttpConnection.Stop() should catch and log all possible exceptions.\r\n                            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n                            this.connection.stop(error);\r\n                        }\r\n                        else {\r\n                            // We cannot await stopInternal() here, but subsequent calls to stop() will await this if stopInternal() is still ongoing.\r\n                            this._stopPromise = this._stopInternal(error);\r\n                        }\r\n                        break;\r\n                    }\r\n                    case MessageType.Ack:\r\n                        if (this._messageBuffer) {\r\n                            this._messageBuffer._ack(message);\r\n                        }\r\n                        break;\r\n                    case MessageType.Sequence:\r\n                        if (this._messageBuffer) {\r\n                            this._messageBuffer._resetSequence(message);\r\n                        }\r\n                        break;\r\n                    default:\r\n                        this._logger.log(LogLevel.Warning, `Invalid message type: ${message.type}.`);\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        this._resetTimeoutPeriod();\r\n    }\r\n    _processHandshakeResponse(data) {\r\n        let responseMessage;\r\n        let remainingData;\r\n        try {\r\n            [remainingData, responseMessage] = this._handshakeProtocol.parseHandshakeResponse(data);\r\n        }\r\n        catch (e) {\r\n            const message = \"Error parsing handshake response: \" + e;\r\n            this._logger.log(LogLevel.Error, message);\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        if (responseMessage.error) {\r\n            const message = \"Server returned handshake error: \" + responseMessage.error;\r\n            this._logger.log(LogLevel.Error, message);\r\n            const error = new Error(message);\r\n            this._handshakeRejecter(error);\r\n            throw error;\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Debug, \"Server handshake complete.\");\r\n        }\r\n        this._handshakeResolver();\r\n        return remainingData;\r\n    }\r\n    _resetKeepAliveInterval() {\r\n        if (this.connection.features.inherentKeepAlive) {\r\n            return;\r\n        }\r\n        // Set the time we want the next keep alive to be sent\r\n        // Timer will be setup on next message receive\r\n        this._nextKeepAlive = new Date().getTime() + this.keepAliveIntervalInMilliseconds;\r\n        this._cleanupPingTimer();\r\n    }\r\n    _resetTimeoutPeriod() {\r\n        if (!this.connection.features || !this.connection.features.inherentKeepAlive) {\r\n            // Set the timeout timer\r\n            this._timeoutHandle = setTimeout(() => this.serverTimeout(), this.serverTimeoutInMilliseconds);\r\n            // Set keepAlive timer if there isn't one\r\n            if (this._pingServerHandle === undefined) {\r\n                let nextPing = this._nextKeepAlive - new Date().getTime();\r\n                if (nextPing < 0) {\r\n                    nextPing = 0;\r\n                }\r\n                // The timer needs to be set from a networking callback to avoid Chrome timer throttling from causing timers to run once a minute\r\n                this._pingServerHandle = setTimeout(async () => {\r\n                    if (this._connectionState === HubConnectionState.Connected) {\r\n                        try {\r\n                            await this._sendMessage(this._cachedPingMessage);\r\n                        }\r\n                        catch {\r\n                            // We don't care about the error. It should be seen elsewhere in the client.\r\n                            // The connection is probably in a bad or closed state now, cleanup the timer so it stops triggering\r\n                            this._cleanupPingTimer();\r\n                        }\r\n                    }\r\n                }, nextPing);\r\n            }\r\n        }\r\n    }\r\n    // eslint-disable-next-line @typescript-eslint/naming-convention\r\n    serverTimeout() {\r\n        // The server hasn't talked to us in a while. It doesn't like us anymore ... :(\r\n        // Terminate the connection, but we don't need to wait on the promise. This could trigger reconnecting.\r\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n        this.connection.stop(new Error(\"Server timeout elapsed without receiving a message from the server.\"));\r\n    }\r\n    async _invokeClientMethod(invocationMessage) {\r\n        const methodName = invocationMessage.target.toLowerCase();\r\n        const methods = this._methods[methodName];\r\n        if (!methods) {\r\n            this._logger.log(LogLevel.Warning, `No client method with the name '${methodName}' found.`);\r\n            // No handlers provided by client but the server is expecting a response still, so we send an error\r\n            if (invocationMessage.invocationId) {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                await this._sendWithProtocol(this._createCompletionMessage(invocationMessage.invocationId, \"Client didn't provide a result.\", null));\r\n            }\r\n            return;\r\n        }\r\n        // Avoid issues with handlers removing themselves thus modifying the list while iterating through it\r\n        const methodsCopy = methods.slice();\r\n        // Server expects a response\r\n        const expectsResponse = invocationMessage.invocationId ? true : false;\r\n        // We preserve the last result or exception but still call all handlers\r\n        let res;\r\n        let exception;\r\n        let completionMessage;\r\n        for (const m of methodsCopy) {\r\n            try {\r\n                const prevRes = res;\r\n                res = await m.apply(this, invocationMessage.arguments);\r\n                if (expectsResponse && res && prevRes) {\r\n                    this._logger.log(LogLevel.Error, `Multiple results provided for '${methodName}'. Sending error to server.`);\r\n                    completionMessage = this._createCompletionMessage(invocationMessage.invocationId, `Client provided multiple results.`, null);\r\n                }\r\n                // Ignore exception if we got a result after, the exception will be logged\r\n                exception = undefined;\r\n            }\r\n            catch (e) {\r\n                exception = e;\r\n                this._logger.log(LogLevel.Error, `A callback for the method '${methodName}' threw error '${e}'.`);\r\n            }\r\n        }\r\n        if (completionMessage) {\r\n            await this._sendWithProtocol(completionMessage);\r\n        }\r\n        else if (expectsResponse) {\r\n            // If there is an exception that means either no result was given or a handler after a result threw\r\n            if (exception) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId, `${exception}`, null);\r\n            }\r\n            else if (res !== undefined) {\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId, null, res);\r\n            }\r\n            else {\r\n                this._logger.log(LogLevel.Warning, `No result given for '${methodName}' method and invocation ID '${invocationMessage.invocationId}'.`);\r\n                // Client didn't provide a result or throw from a handler, server expects a response so we send an error\r\n                completionMessage = this._createCompletionMessage(invocationMessage.invocationId, \"Client didn't provide a result.\", null);\r\n            }\r\n            await this._sendWithProtocol(completionMessage);\r\n        }\r\n        else {\r\n            if (res) {\r\n                this._logger.log(LogLevel.Error, `Result given for '${methodName}' method but server is not expecting a result.`);\r\n            }\r\n        }\r\n    }\r\n    _connectionClosed(error) {\r\n        this._logger.log(LogLevel.Debug, `HubConnection.connectionClosed(${error}) called while in state ${this._connectionState}.`);\r\n        // Triggering this.handshakeRejecter is insufficient because it could already be resolved without the continuation having run yet.\r\n        this._stopDuringStartError = this._stopDuringStartError || error || new AbortError(\"The underlying connection was closed before the hub handshake could complete.\");\r\n        // If the handshake is in progress, start will be waiting for the handshake promise, so we complete it.\r\n        // If it has already completed, this should just noop.\r\n        if (this._handshakeResolver) {\r\n            this._handshakeResolver();\r\n        }\r\n        this._cancelCallbacksWithError(error || new Error(\"Invocation canceled due to the underlying connection being closed.\"));\r\n        this._cleanupTimeout();\r\n        this._cleanupPingTimer();\r\n        if (this._connectionState === HubConnectionState.Disconnecting) {\r\n            this._completeClose(error);\r\n        }\r\n        else if (this._connectionState === HubConnectionState.Connected && this._reconnectPolicy) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._reconnect(error);\r\n        }\r\n        else if (this._connectionState === HubConnectionState.Connected) {\r\n            this._completeClose(error);\r\n        }\r\n        // If none of the above if conditions were true were called the HubConnection must be in either:\r\n        // 1. The Connecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail it.\r\n        // 2. The Reconnecting state in which case the handshakeResolver will complete it and stopDuringStartError will fail the current reconnect attempt\r\n        //    and potentially continue the reconnect() loop.\r\n        // 3. The Disconnected state in which case we're already done.\r\n    }\r\n    _completeClose(error) {\r\n        if (this._connectionStarted) {\r\n            this._connectionState = HubConnectionState.Disconnected;\r\n            this._connectionStarted = false;\r\n            if (this._messageBuffer) {\r\n                this._messageBuffer._dispose(error !== null && error !== void 0 ? error : new Error(\"Connection closed.\"));\r\n                this._messageBuffer = undefined;\r\n            }\r\n            if (Platform.isBrowser) {\r\n                window.document.removeEventListener(\"freeze\", this._freezeEventListener);\r\n            }\r\n            try {\r\n                this._closedCallbacks.forEach((c) => c.apply(this, [error]));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onclose callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n        }\r\n    }\r\n    async _reconnect(error) {\r\n        const reconnectStartTime = Date.now();\r\n        let previousReconnectAttempts = 0;\r\n        let retryError = error !== undefined ? error : new Error(\"Attempting to reconnect due to a unknown error.\");\r\n        let nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, 0, retryError);\r\n        if (nextRetryDelay === null) {\r\n            this._logger.log(LogLevel.Debug, \"Connection not reconnecting because the IRetryPolicy returned null on the first reconnect attempt.\");\r\n            this._completeClose(error);\r\n            return;\r\n        }\r\n        this._connectionState = HubConnectionState.Reconnecting;\r\n        if (error) {\r\n            this._logger.log(LogLevel.Information, `Connection reconnecting because of error '${error}'.`);\r\n        }\r\n        else {\r\n            this._logger.log(LogLevel.Information, \"Connection reconnecting.\");\r\n        }\r\n        if (this._reconnectingCallbacks.length !== 0) {\r\n            try {\r\n                this._reconnectingCallbacks.forEach((c) => c.apply(this, [error]));\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `An onreconnecting callback called with error '${error}' threw error '${e}'.`);\r\n            }\r\n            // Exit early if an onreconnecting callback called connection.stop().\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state in onreconnecting callback. Done reconnecting.\");\r\n                return;\r\n            }\r\n        }\r\n        while (nextRetryDelay !== null) {\r\n            this._logger.log(LogLevel.Information, `Reconnect attempt number ${previousReconnectAttempts} will start in ${nextRetryDelay} ms.`);\r\n            await new Promise((resolve) => {\r\n                this._reconnectDelayHandle = setTimeout(resolve, nextRetryDelay);\r\n            });\r\n            this._reconnectDelayHandle = undefined;\r\n            if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                this._logger.log(LogLevel.Debug, \"Connection left the reconnecting state during reconnect delay. Done reconnecting.\");\r\n                return;\r\n            }\r\n            try {\r\n                await this._startInternal();\r\n                this._connectionState = HubConnectionState.Connected;\r\n                this._logger.log(LogLevel.Information, \"HubConnection reconnected successfully.\");\r\n                if (this._reconnectedCallbacks.length !== 0) {\r\n                    try {\r\n                        this._reconnectedCallbacks.forEach((c) => c.apply(this, [this.connection.connectionId]));\r\n                    }\r\n                    catch (e) {\r\n                        this._logger.log(LogLevel.Error, `An onreconnected callback called with connectionId '${this.connection.connectionId}; threw error '${e}'.`);\r\n                    }\r\n                }\r\n                return;\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Information, `Reconnect attempt failed because of error '${e}'.`);\r\n                if (this._connectionState !== HubConnectionState.Reconnecting) {\r\n                    this._logger.log(LogLevel.Debug, `Connection moved to the '${this._connectionState}' from the reconnecting state during reconnect attempt. Done reconnecting.`);\r\n                    // The TypeScript compiler thinks that connectionState must be Connected here. The TypeScript compiler is wrong.\r\n                    if (this._connectionState === HubConnectionState.Disconnecting) {\r\n                        this._completeClose();\r\n                    }\r\n                    return;\r\n                }\r\n                retryError = e instanceof Error ? e : new Error(e.toString());\r\n                nextRetryDelay = this._getNextRetryDelay(previousReconnectAttempts++, Date.now() - reconnectStartTime, retryError);\r\n            }\r\n        }\r\n        this._logger.log(LogLevel.Information, `Reconnect retries have been exhausted after ${Date.now() - reconnectStartTime} ms and ${previousReconnectAttempts} failed attempts. Connection disconnecting.`);\r\n        this._completeClose();\r\n    }\r\n    _getNextRetryDelay(previousRetryCount, elapsedMilliseconds, retryReason) {\r\n        try {\r\n            return this._reconnectPolicy.nextRetryDelayInMilliseconds({\r\n                elapsedMilliseconds,\r\n                previousRetryCount,\r\n                retryReason,\r\n            });\r\n        }\r\n        catch (e) {\r\n            this._logger.log(LogLevel.Error, `IRetryPolicy.nextRetryDelayInMilliseconds(${previousRetryCount}, ${elapsedMilliseconds}) threw error '${e}'.`);\r\n            return null;\r\n        }\r\n    }\r\n    _cancelCallbacksWithError(error) {\r\n        const callbacks = this._callbacks;\r\n        this._callbacks = {};\r\n        Object.keys(callbacks)\r\n            .forEach((key) => {\r\n            const callback = callbacks[key];\r\n            try {\r\n                callback(null, error);\r\n            }\r\n            catch (e) {\r\n                this._logger.log(LogLevel.Error, `Stream 'error' callback called with '${error}' threw error: ${getErrorString(e)}`);\r\n            }\r\n        });\r\n    }\r\n    _cleanupPingTimer() {\r\n        if (this._pingServerHandle) {\r\n            clearTimeout(this._pingServerHandle);\r\n            this._pingServerHandle = undefined;\r\n        }\r\n    }\r\n    _cleanupTimeout() {\r\n        if (this._timeoutHandle) {\r\n            clearTimeout(this._timeoutHandle);\r\n        }\r\n    }\r\n    _createInvocation(methodName, args, nonblocking, streamIds) {\r\n        if (nonblocking) {\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    arguments: args,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n        else {\r\n            const invocationId = this._invocationId;\r\n            this._invocationId++;\r\n            if (streamIds.length !== 0) {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    streamIds,\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    arguments: args,\r\n                    invocationId: invocationId.toString(),\r\n                    target: methodName,\r\n                    type: MessageType.Invocation,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    _launchStreams(streams, promiseQueue) {\r\n        if (streams.length === 0) {\r\n            return;\r\n        }\r\n        // Synchronize stream data so they arrive in-order on the server\r\n        if (!promiseQueue) {\r\n            promiseQueue = Promise.resolve();\r\n        }\r\n        // We want to iterate over the keys, since the keys are the stream ids\r\n        // eslint-disable-next-line guard-for-in\r\n        for (const streamId in streams) {\r\n            streams[streamId].subscribe({\r\n                complete: () => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId)));\r\n                },\r\n                error: (err) => {\r\n                    let message;\r\n                    if (err instanceof Error) {\r\n                        message = err.message;\r\n                    }\r\n                    else if (err && err.toString) {\r\n                        message = err.toString();\r\n                    }\r\n                    else {\r\n                        message = \"Unknown error\";\r\n                    }\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createCompletionMessage(streamId, message)));\r\n                },\r\n                next: (item) => {\r\n                    promiseQueue = promiseQueue.then(() => this._sendWithProtocol(this._createStreamItemMessage(streamId, item)));\r\n                },\r\n            });\r\n        }\r\n    }\r\n    _replaceStreamingParams(args) {\r\n        const streams = [];\r\n        const streamIds = [];\r\n        for (let i = 0; i < args.length; i++) {\r\n            const argument = args[i];\r\n            if (this._isObservable(argument)) {\r\n                const streamId = this._invocationId;\r\n                this._invocationId++;\r\n                // Store the stream for later use\r\n                streams[streamId] = argument;\r\n                streamIds.push(streamId.toString());\r\n                // remove stream from args\r\n                args.splice(i, 1);\r\n            }\r\n        }\r\n        return [streams, streamIds];\r\n    }\r\n    _isObservable(arg) {\r\n        // This allows other stream implementations to just work (like rxjs)\r\n        return arg && arg.subscribe && typeof arg.subscribe === \"function\";\r\n    }\r\n    _createStreamInvocation(methodName, args, streamIds) {\r\n        const invocationId = this._invocationId;\r\n        this._invocationId++;\r\n        if (streamIds.length !== 0) {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                streamIds,\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n        else {\r\n            return {\r\n                arguments: args,\r\n                invocationId: invocationId.toString(),\r\n                target: methodName,\r\n                type: MessageType.StreamInvocation,\r\n            };\r\n        }\r\n    }\r\n    _createCancelInvocation(id) {\r\n        return {\r\n            invocationId: id,\r\n            type: MessageType.CancelInvocation,\r\n        };\r\n    }\r\n    _createStreamItemMessage(id, item) {\r\n        return {\r\n            invocationId: id,\r\n            item,\r\n            type: MessageType.StreamItem,\r\n        };\r\n    }\r\n    _createCompletionMessage(id, error, result) {\r\n        if (error) {\r\n            return {\r\n                error,\r\n                invocationId: id,\r\n                type: MessageType.Completion,\r\n            };\r\n        }\r\n        return {\r\n            invocationId: id,\r\n            result,\r\n            type: MessageType.Completion,\r\n        };\r\n    }\r\n    _createCloseMessage() {\r\n        return { type: MessageType.Close };\r\n    }\r\n}\r\n//# sourceMappingURL=HubConnection.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\r\nimport { HttpConnection } from \"./HttpConnection\";\r\nimport { HubConnection } from \"./HubConnection\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { Arg, ConsoleLogger } from \"./Utils\";\r\nconst LogLevelNameMapping = {\r\n    trace: LogLevel.Trace,\r\n    debug: LogLevel.Debug,\r\n    info: LogLevel.Information,\r\n    information: LogLevel.Information,\r\n    warn: LogLevel.Warning,\r\n    warning: LogLevel.Warning,\r\n    error: LogLevel.Error,\r\n    critical: LogLevel.Critical,\r\n    none: LogLevel.None,\r\n};\r\nfunction parseLogLevel(name) {\r\n    // Case-insensitive matching via lower-casing\r\n    // Yes, I know case-folding is a complicated problem in Unicode, but we only support\r\n    // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\r\n    const mapping = LogLevelNameMapping[name.toLowerCase()];\r\n    if (typeof mapping !== \"undefined\") {\r\n        return mapping;\r\n    }\r\n    else {\r\n        throw new Error(`Unknown log level: ${name}`);\r\n    }\r\n}\r\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\r\nexport class HubConnectionBuilder {\r\n    configureLogging(logging) {\r\n        Arg.isRequired(logging, \"logging\");\r\n        if (isLogger(logging)) {\r\n            this.logger = logging;\r\n        }\r\n        else if (typeof logging === \"string\") {\r\n            const logLevel = parseLogLevel(logging);\r\n            this.logger = new ConsoleLogger(logLevel);\r\n        }\r\n        else {\r\n            this.logger = new ConsoleLogger(logging);\r\n        }\r\n        return this;\r\n    }\r\n    withUrl(url, transportTypeOrOptions) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isNotEmpty(url, \"url\");\r\n        this.url = url;\r\n        // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\r\n        // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\r\n        if (typeof transportTypeOrOptions === \"object\") {\r\n            this.httpConnectionOptions = { ...this.httpConnectionOptions, ...transportTypeOrOptions };\r\n        }\r\n        else {\r\n            this.httpConnectionOptions = {\r\n                ...this.httpConnectionOptions,\r\n                transport: transportTypeOrOptions,\r\n            };\r\n        }\r\n        return this;\r\n    }\r\n    /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n     *\r\n     * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n     */\r\n    withHubProtocol(protocol) {\r\n        Arg.isRequired(protocol, \"protocol\");\r\n        this.protocol = protocol;\r\n        return this;\r\n    }\r\n    withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\r\n        if (this.reconnectPolicy) {\r\n            throw new Error(\"A reconnectPolicy has already been set.\");\r\n        }\r\n        if (!retryDelaysOrReconnectPolicy) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy();\r\n        }\r\n        else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\r\n            this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\r\n        }\r\n        else {\r\n            this.reconnectPolicy = retryDelaysOrReconnectPolicy;\r\n        }\r\n        return this;\r\n    }\r\n    /** Configures {@link @microsoft/signalr.HubConnection.serverTimeoutInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    withServerTimeout(milliseconds) {\r\n        Arg.isRequired(milliseconds, \"milliseconds\");\r\n        this._serverTimeoutInMilliseconds = milliseconds;\r\n        return this;\r\n    }\r\n    /** Configures {@link @microsoft/signalr.HubConnection.keepAliveIntervalInMilliseconds} for the {@link @microsoft/signalr.HubConnection}.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    withKeepAliveInterval(milliseconds) {\r\n        Arg.isRequired(milliseconds, \"milliseconds\");\r\n        this._keepAliveIntervalInMilliseconds = milliseconds;\r\n        return this;\r\n    }\r\n    /** Enables and configures options for the Stateful Reconnect feature.\r\n     *\r\n     * @returns The {@link @microsoft/signalr.HubConnectionBuilder} instance, for chaining.\r\n     */\r\n    withStatefulReconnect(options) {\r\n        if (this.httpConnectionOptions === undefined) {\r\n            this.httpConnectionOptions = {};\r\n        }\r\n        this.httpConnectionOptions._useStatefulReconnect = true;\r\n        this._statefulReconnectBufferSize = options === null || options === void 0 ? void 0 : options.bufferSize;\r\n        return this;\r\n    }\r\n    /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n     *\r\n     * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n     */\r\n    build() {\r\n        // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\r\n        // provided to configureLogger\r\n        const httpConnectionOptions = this.httpConnectionOptions || {};\r\n        // If it's 'null', the user **explicitly** asked for null, don't mess with it.\r\n        if (httpConnectionOptions.logger === undefined) {\r\n            // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\r\n            httpConnectionOptions.logger = this.logger;\r\n        }\r\n        // Now create the connection\r\n        if (!this.url) {\r\n            throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\r\n        }\r\n        const connection = new HttpConnection(this.url, httpConnectionOptions);\r\n        return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol(), this.reconnectPolicy, this._serverTimeoutInMilliseconds, this._keepAliveIntervalInMilliseconds, this._statefulReconnectBufferSize);\r\n    }\r\n}\r\nfunction isLogger(logger) {\r\n    return logger.log !== undefined;\r\n}\r\n//# sourceMappingURL=HubConnectionBuilder.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** Defines the type of a Hub Message. */\r\nexport var MessageType;\r\n(function (MessageType) {\r\n    /** Indicates the message is an Invocation message and implements the {@link @microsoft/signalr.InvocationMessage} interface. */\r\n    MessageType[MessageType[\"Invocation\"] = 1] = \"Invocation\";\r\n    /** Indicates the message is a StreamItem message and implements the {@link @microsoft/signalr.StreamItemMessage} interface. */\r\n    MessageType[MessageType[\"StreamItem\"] = 2] = \"StreamItem\";\r\n    /** Indicates the message is a Completion message and implements the {@link @microsoft/signalr.CompletionMessage} interface. */\r\n    MessageType[MessageType[\"Completion\"] = 3] = \"Completion\";\r\n    /** Indicates the message is a Stream Invocation message and implements the {@link @microsoft/signalr.StreamInvocationMessage} interface. */\r\n    MessageType[MessageType[\"StreamInvocation\"] = 4] = \"StreamInvocation\";\r\n    /** Indicates the message is a Cancel Invocation message and implements the {@link @microsoft/signalr.CancelInvocationMessage} interface. */\r\n    MessageType[MessageType[\"CancelInvocation\"] = 5] = \"CancelInvocation\";\r\n    /** Indicates the message is a Ping message and implements the {@link @microsoft/signalr.PingMessage} interface. */\r\n    MessageType[MessageType[\"Ping\"] = 6] = \"Ping\";\r\n    /** Indicates the message is a Close message and implements the {@link @microsoft/signalr.CloseMessage} interface. */\r\n    MessageType[MessageType[\"Close\"] = 7] = \"Close\";\r\n    MessageType[MessageType[\"Ack\"] = 8] = \"Ack\";\r\n    MessageType[MessageType[\"Sequence\"] = 9] = \"Sequence\";\r\n})(MessageType || (MessageType = {}));\r\n//# sourceMappingURL=IHubProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// These values are designed to match the ASP.NET Log Levels since that's the pattern we're emulating here.\r\n/** Indicates the severity of a log message.\r\n *\r\n * Log Levels are ordered in increasing severity. So `Debug` is more severe than `Trace`, etc.\r\n */\r\nexport var LogLevel;\r\n(function (LogLevel) {\r\n    /** Log level for very low severity diagnostic messages. */\r\n    LogLevel[LogLevel[\"Trace\"] = 0] = \"Trace\";\r\n    /** Log level for low severity diagnostic messages. */\r\n    LogLevel[LogLevel[\"Debug\"] = 1] = \"Debug\";\r\n    /** Log level for informational diagnostic messages. */\r\n    LogLevel[LogLevel[\"Information\"] = 2] = \"Information\";\r\n    /** Log level for diagnostic messages that indicate a non-fatal problem. */\r\n    LogLevel[LogLevel[\"Warning\"] = 3] = \"Warning\";\r\n    /** Log level for diagnostic messages that indicate a failure in the current operation. */\r\n    LogLevel[LogLevel[\"Error\"] = 4] = \"Error\";\r\n    /** Log level for diagnostic messages that indicate a failure that will terminate the entire application. */\r\n    LogLevel[LogLevel[\"Critical\"] = 5] = \"Critical\";\r\n    /** The highest possible log level. Used when configuring logging to indicate that no log messages should be emitted. */\r\n    LogLevel[LogLevel[\"None\"] = 6] = \"None\";\r\n})(LogLevel || (LogLevel = {}));\r\n//# sourceMappingURL=ILogger.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// This will be treated as a bit flag in the future, so we keep it using power-of-two values.\r\n/** Specifies a specific HTTP transport type. */\r\nexport var HttpTransportType;\r\n(function (HttpTransportType) {\r\n    /** Specifies no transport preference. */\r\n    HttpTransportType[HttpTransportType[\"None\"] = 0] = \"None\";\r\n    /** Specifies the WebSockets transport. */\r\n    HttpTransportType[HttpTransportType[\"WebSockets\"] = 1] = \"WebSockets\";\r\n    /** Specifies the Server-Sent Events transport. */\r\n    HttpTransportType[HttpTransportType[\"ServerSentEvents\"] = 2] = \"ServerSentEvents\";\r\n    /** Specifies the Long Polling transport. */\r\n    HttpTransportType[HttpTransportType[\"LongPolling\"] = 4] = \"LongPolling\";\r\n})(HttpTransportType || (HttpTransportType = {}));\r\n/** Specifies the transfer format for a connection. */\r\nexport var TransferFormat;\r\n(function (TransferFormat) {\r\n    /** Specifies that only text data will be transmitted over the connection. */\r\n    TransferFormat[TransferFormat[\"Text\"] = 1] = \"Text\";\r\n    /** Specifies that binary data will be transmitted over the connection. */\r\n    TransferFormat[TransferFormat[\"Binary\"] = 2] = \"Binary\";\r\n})(TransferFormat || (TransferFormat = {}));\r\n//# sourceMappingURL=ITransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { NullLogger } from \"./Loggers\";\r\nimport { TextMessageFormat } from \"./TextMessageFormat\";\r\nconst JSON_HUB_PROTOCOL_NAME = \"json\";\r\n/** Implements the JSON Hub Protocol. */\r\nexport class JsonHubProtocol {\r\n    constructor() {\r\n        /** @inheritDoc */\r\n        this.name = JSON_HUB_PROTOCOL_NAME;\r\n        /** @inheritDoc */\r\n        this.version = 2;\r\n        /** @inheritDoc */\r\n        this.transferFormat = TransferFormat.Text;\r\n    }\r\n    /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n     *\r\n     * @param {string} input A string containing the serialized representation.\r\n     * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n     */\r\n    parseMessages(input, logger) {\r\n        // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\r\n        if (typeof input !== \"string\") {\r\n            throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\r\n        }\r\n        if (!input) {\r\n            return [];\r\n        }\r\n        if (logger === null) {\r\n            logger = NullLogger.instance;\r\n        }\r\n        // Parse the messages\r\n        const messages = TextMessageFormat.parse(input);\r\n        const hubMessages = [];\r\n        for (const message of messages) {\r\n            const parsedMessage = JSON.parse(message);\r\n            if (typeof parsedMessage.type !== \"number\") {\r\n                throw new Error(\"Invalid payload.\");\r\n            }\r\n            switch (parsedMessage.type) {\r\n                case MessageType.Invocation:\r\n                    this._isInvocationMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.StreamItem:\r\n                    this._isStreamItemMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Completion:\r\n                    this._isCompletionMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Ping:\r\n                    // Single value, no need to validate\r\n                    break;\r\n                case MessageType.Close:\r\n                    // All optional values, no need to validate\r\n                    break;\r\n                case MessageType.Ack:\r\n                    this._isAckMessage(parsedMessage);\r\n                    break;\r\n                case MessageType.Sequence:\r\n                    this._isSequenceMessage(parsedMessage);\r\n                    break;\r\n                default:\r\n                    // Future protocol changes can add message types, old clients can ignore them\r\n                    logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\r\n                    continue;\r\n            }\r\n            hubMessages.push(parsedMessage);\r\n        }\r\n        return hubMessages;\r\n    }\r\n    /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n     *\r\n     * @param {HubMessage} message The message to write.\r\n     * @returns {string} A string containing the serialized representation of the message.\r\n     */\r\n    writeMessage(message) {\r\n        return TextMessageFormat.write(JSON.stringify(message));\r\n    }\r\n    _isInvocationMessage(message) {\r\n        this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\r\n        if (message.invocationId !== undefined) {\r\n            this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\r\n        }\r\n    }\r\n    _isStreamItemMessage(message) {\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\r\n        if (message.item === undefined) {\r\n            throw new Error(\"Invalid payload for StreamItem message.\");\r\n        }\r\n    }\r\n    _isCompletionMessage(message) {\r\n        if (message.result && message.error) {\r\n            throw new Error(\"Invalid payload for Completion message.\");\r\n        }\r\n        if (!message.result && message.error) {\r\n            this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\r\n        }\r\n        this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\r\n    }\r\n    _isAckMessage(message) {\r\n        if (typeof message.sequenceId !== 'number') {\r\n            throw new Error(\"Invalid SequenceId for Ack message.\");\r\n        }\r\n    }\r\n    _isSequenceMessage(message) {\r\n        if (typeof message.sequenceId !== 'number') {\r\n            throw new Error(\"Invalid SequenceId for Sequence message.\");\r\n        }\r\n    }\r\n    _assertNotEmptyString(value, errorMessage) {\r\n        if (typeof value !== \"string\" || value === \"\") {\r\n            throw new Error(errorMessage);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=JsonHubProtocol.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n/** A logger that does nothing when log messages are sent to it. */\r\nexport class NullLogger {\r\n    constructor() { }\r\n    /** @inheritDoc */\r\n    // eslint-disable-next-line\r\n    log(_logLevel, _message) {\r\n    }\r\n}\r\n/** The singleton instance of the {@link @microsoft/signalr.NullLogger}. */\r\nNullLogger.instance = new NullLogger();\r\n//# sourceMappingURL=Loggers.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortController } from \"./AbortController\";\r\nimport { HttpError, TimeoutError } from \"./Errors\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, sendMessage } from \"./Utils\";\r\n// Not exported from 'index', this type is internal.\r\n/** @private */\r\nexport class LongPollingTransport {\r\n    // This is an internal type, not exported from 'index' so this is really just internal.\r\n    get pollAborted() {\r\n        return this._pollAbort.aborted;\r\n    }\r\n    constructor(httpClient, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._logger = logger;\r\n        this._pollAbort = new AbortController();\r\n        this._options = options;\r\n        this._running = false;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._url = url;\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Connecting.\");\r\n        // Allow binary format on Node and Browsers that support binary content (indicated by the presence of responseType property)\r\n        if (transferFormat === TransferFormat.Binary &&\r\n            (typeof XMLHttpRequest !== \"undefined\" && typeof new XMLHttpRequest().responseType !== \"string\")) {\r\n            throw new Error(\"Binary protocols over XmlHttpRequest not implementing advanced features are not supported.\");\r\n        }\r\n        const [name, value] = getUserAgentHeader();\r\n        const headers = { [name]: value, ...this._options.headers };\r\n        const pollOptions = {\r\n            abortSignal: this._pollAbort.signal,\r\n            headers,\r\n            timeout: 100000,\r\n            withCredentials: this._options.withCredentials,\r\n        };\r\n        if (transferFormat === TransferFormat.Binary) {\r\n            pollOptions.responseType = \"arraybuffer\";\r\n        }\r\n        // Make initial long polling request\r\n        // Server uses first long polling request to finish initializing connection and it returns without data\r\n        const pollUrl = `${url}&_=${Date.now()}`;\r\n        this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n        const response = await this._httpClient.get(pollUrl, pollOptions);\r\n        if (response.statusCode !== 200) {\r\n            this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n            // Mark running as false so that the poll immediately ends and runs the close logic\r\n            this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n            this._running = false;\r\n        }\r\n        else {\r\n            this._running = true;\r\n        }\r\n        this._receiving = this._poll(this._url, pollOptions);\r\n    }\r\n    async _poll(url, pollOptions) {\r\n        try {\r\n            while (this._running) {\r\n                try {\r\n                    const pollUrl = `${url}&_=${Date.now()}`;\r\n                    this._logger.log(LogLevel.Trace, `(LongPolling transport) polling: ${pollUrl}.`);\r\n                    const response = await this._httpClient.get(pollUrl, pollOptions);\r\n                    if (response.statusCode === 204) {\r\n                        this._logger.log(LogLevel.Information, \"(LongPolling transport) Poll terminated by server.\");\r\n                        this._running = false;\r\n                    }\r\n                    else if (response.statusCode !== 200) {\r\n                        this._logger.log(LogLevel.Error, `(LongPolling transport) Unexpected response code: ${response.statusCode}.`);\r\n                        // Unexpected status code\r\n                        this._closeError = new HttpError(response.statusText || \"\", response.statusCode);\r\n                        this._running = false;\r\n                    }\r\n                    else {\r\n                        // Process the response\r\n                        if (response.content) {\r\n                            this._logger.log(LogLevel.Trace, `(LongPolling transport) data received. ${getDataDetail(response.content, this._options.logMessageContent)}.`);\r\n                            if (this.onreceive) {\r\n                                this.onreceive(response.content);\r\n                            }\r\n                        }\r\n                        else {\r\n                            // This is another way timeout manifest.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    if (!this._running) {\r\n                        // Log but disregard errors that occur after stopping\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Poll errored after shutdown: ${e.message}`);\r\n                    }\r\n                    else {\r\n                        if (e instanceof TimeoutError) {\r\n                            // Ignore timeouts and reissue the poll.\r\n                            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Poll timed out, reissuing.\");\r\n                        }\r\n                        else {\r\n                            // Close the connection with the error as the result.\r\n                            this._closeError = e;\r\n                            this._running = false;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Polling complete.\");\r\n            // We will reach here with pollAborted==false when the server returned a response causing the transport to stop.\r\n            // If pollAborted==true then client initiated the stop and the stop method will raise the close event after DELETE is sent.\r\n            if (!this.pollAborted) {\r\n                this._raiseOnClose();\r\n            }\r\n        }\r\n    }\r\n    async send(data) {\r\n        if (!this._running) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"LongPolling\", this._httpClient, this._url, data, this._options);\r\n    }\r\n    async stop() {\r\n        this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stopping polling.\");\r\n        // Tell receiving loop to stop, abort any current request, and then wait for it to finish\r\n        this._running = false;\r\n        this._pollAbort.abort();\r\n        try {\r\n            await this._receiving;\r\n            // Send DELETE to clean up long polling on the server\r\n            this._logger.log(LogLevel.Trace, `(LongPolling transport) sending DELETE request to ${this._url}.`);\r\n            const headers = {};\r\n            const [name, value] = getUserAgentHeader();\r\n            headers[name] = value;\r\n            const deleteOptions = {\r\n                headers: { ...headers, ...this._options.headers },\r\n                timeout: this._options.timeout,\r\n                withCredentials: this._options.withCredentials,\r\n            };\r\n            let error;\r\n            try {\r\n                await this._httpClient.delete(this._url, deleteOptions);\r\n            }\r\n            catch (err) {\r\n                error = err;\r\n            }\r\n            if (error) {\r\n                if (error instanceof HttpError) {\r\n                    if (error.statusCode === 404) {\r\n                        this._logger.log(LogLevel.Trace, \"(LongPolling transport) A 404 response was returned from sending a DELETE request.\");\r\n                    }\r\n                    else {\r\n                        this._logger.log(LogLevel.Trace, `(LongPolling transport) Error sending a DELETE request: ${error}`);\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this._logger.log(LogLevel.Trace, \"(LongPolling transport) DELETE request accepted.\");\r\n            }\r\n        }\r\n        finally {\r\n            this._logger.log(LogLevel.Trace, \"(LongPolling transport) Stop finished.\");\r\n            // Raise close event here instead of in polling\r\n            // It needs to happen after the DELETE request is sent\r\n            this._raiseOnClose();\r\n        }\r\n    }\r\n    _raiseOnClose() {\r\n        if (this.onclose) {\r\n            let logMessage = \"(LongPolling transport) Firing onclose event.\";\r\n            if (this._closeError) {\r\n                logMessage += \" Error: \" + this._closeError;\r\n            }\r\n            this._logger.log(LogLevel.Trace, logMessage);\r\n            this.onclose(this._closeError);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=LongPollingTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { MessageType } from \"./IHubProtocol\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\n/** @private */\r\nexport class MessageBuffer {\r\n    constructor(protocol, connection, bufferSize) {\r\n        this._bufferSize = 100000;\r\n        this._messages = [];\r\n        this._totalMessageCount = 0;\r\n        this._waitForSequenceMessage = false;\r\n        // Message IDs start at 1 and always increment by 1\r\n        this._nextReceivingSequenceId = 1;\r\n        this._latestReceivedSequenceId = 0;\r\n        this._bufferedByteCount = 0;\r\n        this._reconnectInProgress = false;\r\n        this._protocol = protocol;\r\n        this._connection = connection;\r\n        this._bufferSize = bufferSize;\r\n    }\r\n    async _send(message) {\r\n        const serializedMessage = this._protocol.writeMessage(message);\r\n        let backpressurePromise = Promise.resolve();\r\n        // Only count invocation messages. Acks, pings, etc. don't need to be resent on reconnect\r\n        if (this._isInvocationMessage(message)) {\r\n            this._totalMessageCount++;\r\n            let backpressurePromiseResolver = () => { };\r\n            let backpressurePromiseRejector = () => { };\r\n            if (isArrayBuffer(serializedMessage)) {\r\n                this._bufferedByteCount += serializedMessage.byteLength;\r\n            }\r\n            else {\r\n                this._bufferedByteCount += serializedMessage.length;\r\n            }\r\n            if (this._bufferedByteCount >= this._bufferSize) {\r\n                backpressurePromise = new Promise((resolve, reject) => {\r\n                    backpressurePromiseResolver = resolve;\r\n                    backpressurePromiseRejector = reject;\r\n                });\r\n            }\r\n            this._messages.push(new BufferedItem(serializedMessage, this._totalMessageCount, backpressurePromiseResolver, backpressurePromiseRejector));\r\n        }\r\n        try {\r\n            // If this is set it means we are reconnecting or resending\r\n            // We don't want to send on a disconnected connection\r\n            // And we don't want to send if resend is running since that would mean sending\r\n            // this message twice\r\n            if (!this._reconnectInProgress) {\r\n                await this._connection.send(serializedMessage);\r\n            }\r\n        }\r\n        catch {\r\n            this._disconnected();\r\n        }\r\n        await backpressurePromise;\r\n    }\r\n    _ack(ackMessage) {\r\n        let newestAckedMessage = -1;\r\n        // Find index of newest message being acked\r\n        for (let index = 0; index < this._messages.length; index++) {\r\n            const element = this._messages[index];\r\n            if (element._id <= ackMessage.sequenceId) {\r\n                newestAckedMessage = index;\r\n                if (isArrayBuffer(element._message)) {\r\n                    this._bufferedByteCount -= element._message.byteLength;\r\n                }\r\n                else {\r\n                    this._bufferedByteCount -= element._message.length;\r\n                }\r\n                // resolve items that have already been sent and acked\r\n                element._resolver();\r\n            }\r\n            else if (this._bufferedByteCount < this._bufferSize) {\r\n                // resolve items that now fall under the buffer limit but haven't been acked\r\n                element._resolver();\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (newestAckedMessage !== -1) {\r\n            // We're removing everything including the message pointed to, so add 1\r\n            this._messages = this._messages.slice(newestAckedMessage + 1);\r\n        }\r\n    }\r\n    _shouldProcessMessage(message) {\r\n        if (this._waitForSequenceMessage) {\r\n            if (message.type !== MessageType.Sequence) {\r\n                return false;\r\n            }\r\n            else {\r\n                this._waitForSequenceMessage = false;\r\n                return true;\r\n            }\r\n        }\r\n        // No special processing for acks, pings, etc.\r\n        if (!this._isInvocationMessage(message)) {\r\n            return true;\r\n        }\r\n        const currentId = this._nextReceivingSequenceId;\r\n        this._nextReceivingSequenceId++;\r\n        if (currentId <= this._latestReceivedSequenceId) {\r\n            if (currentId === this._latestReceivedSequenceId) {\r\n                // Should only hit this if we just reconnected and the server is sending\r\n                // Messages it has buffered, which would mean it hasn't seen an Ack for these messages\r\n                this._ackTimer();\r\n            }\r\n            // Ignore, this is a duplicate message\r\n            return false;\r\n        }\r\n        this._latestReceivedSequenceId = currentId;\r\n        // Only start the timer for sending an Ack message when we have a message to ack. This also conveniently solves\r\n        // timer throttling by not having a recursive timer, and by starting the timer via a network call (recv)\r\n        this._ackTimer();\r\n        return true;\r\n    }\r\n    _resetSequence(message) {\r\n        if (message.sequenceId > this._nextReceivingSequenceId) {\r\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\r\n            this._connection.stop(new Error(\"Sequence ID greater than amount of messages we've received.\"));\r\n            return;\r\n        }\r\n        this._nextReceivingSequenceId = message.sequenceId;\r\n    }\r\n    _disconnected() {\r\n        this._reconnectInProgress = true;\r\n        this._waitForSequenceMessage = true;\r\n    }\r\n    async _resend() {\r\n        const sequenceId = this._messages.length !== 0\r\n            ? this._messages[0]._id\r\n            : this._totalMessageCount + 1;\r\n        await this._connection.send(this._protocol.writeMessage({ type: MessageType.Sequence, sequenceId }));\r\n        // Get a local variable to the _messages, just in case messages are acked while resending\r\n        // Which would slice the _messages array (which creates a new copy)\r\n        const messages = this._messages;\r\n        for (const element of messages) {\r\n            await this._connection.send(element._message);\r\n        }\r\n        this._reconnectInProgress = false;\r\n    }\r\n    _dispose(error) {\r\n        error !== null && error !== void 0 ? error : (error = new Error(\"Unable to reconnect to server.\"));\r\n        // Unblock backpressure if any\r\n        for (const element of this._messages) {\r\n            element._rejector(error);\r\n        }\r\n    }\r\n    _isInvocationMessage(message) {\r\n        // There is no way to check if something implements an interface.\r\n        // So we individually check the messages in a switch statement.\r\n        // To make sure we don't miss any message types we rely on the compiler\r\n        // seeing the function returns a value and it will do the\r\n        // exhaustive check for us on the switch statement, since we don't use 'case default'\r\n        switch (message.type) {\r\n            case MessageType.Invocation:\r\n            case MessageType.StreamItem:\r\n            case MessageType.Completion:\r\n            case MessageType.StreamInvocation:\r\n            case MessageType.CancelInvocation:\r\n                return true;\r\n            case MessageType.Close:\r\n            case MessageType.Sequence:\r\n            case MessageType.Ping:\r\n            case MessageType.Ack:\r\n                return false;\r\n        }\r\n    }\r\n    _ackTimer() {\r\n        if (this._ackTimerHandle === undefined) {\r\n            this._ackTimerHandle = setTimeout(async () => {\r\n                try {\r\n                    if (!this._reconnectInProgress) {\r\n                        await this._connection.send(this._protocol.writeMessage({ type: MessageType.Ack, sequenceId: this._latestReceivedSequenceId }));\r\n                    }\r\n                    // Ignore errors, that means the connection is closed and we don't care about the Ack message anymore.\r\n                }\r\n                catch { }\r\n                clearTimeout(this._ackTimerHandle);\r\n                this._ackTimerHandle = undefined;\r\n                // 1 second delay so we don't spam Ack messages if there are many messages being received at once.\r\n            }, 1000);\r\n        }\r\n    }\r\n}\r\nclass BufferedItem {\r\n    constructor(message, id, resolver, rejector) {\r\n        this._message = message;\r\n        this._id = id;\r\n        this._resolver = resolver;\r\n        this._rejector = rejector;\r\n    }\r\n}\r\n//# sourceMappingURL=MessageBuffer.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform, sendMessage } from \"./Utils\";\r\n/** @private */\r\nexport class ServerSentEventsTransport {\r\n    constructor(httpClient, accessToken, logger, options) {\r\n        this._httpClient = httpClient;\r\n        this._accessToken = accessToken;\r\n        this._logger = logger;\r\n        this._options = options;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(SSE transport) Connecting.\");\r\n        // set url before accessTokenFactory because this._url is only for send and we set the auth header instead of the query string for send\r\n        this._url = url;\r\n        if (this._accessToken) {\r\n            url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(this._accessToken)}`;\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            let opened = false;\r\n            if (transferFormat !== TransferFormat.Text) {\r\n                reject(new Error(\"The Server-Sent Events transport only supports the 'Text' transfer format\"));\r\n                return;\r\n            }\r\n            let eventSource;\r\n            if (Platform.isBrowser || Platform.isWebWorker) {\r\n                eventSource = new this._options.EventSource(url, { withCredentials: this._options.withCredentials });\r\n            }\r\n            else {\r\n                // Non-browser passes cookies via the dictionary\r\n                const cookies = this._httpClient.getCookieString(url);\r\n                const headers = {};\r\n                headers.Cookie = cookies;\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                eventSource = new this._options.EventSource(url, { withCredentials: this._options.withCredentials, headers: { ...headers, ...this._options.headers } });\r\n            }\r\n            try {\r\n                eventSource.onmessage = (e) => {\r\n                    if (this.onreceive) {\r\n                        try {\r\n                            this._logger.log(LogLevel.Trace, `(SSE transport) data received. ${getDataDetail(e.data, this._options.logMessageContent)}.`);\r\n                            this.onreceive(e.data);\r\n                        }\r\n                        catch (error) {\r\n                            this._close(error);\r\n                            return;\r\n                        }\r\n                    }\r\n                };\r\n                // @ts-ignore: not using event on purpose\r\n                eventSource.onerror = (e) => {\r\n                    // EventSource doesn't give any useful information about server side closes.\r\n                    if (opened) {\r\n                        this._close();\r\n                    }\r\n                    else {\r\n                        reject(new Error(\"EventSource failed to connect. The connection could not be found on the server,\"\r\n                            + \" either the connection ID is not present on the server, or a proxy is refusing/buffering the connection.\"\r\n                            + \" If you have multiple servers check that sticky sessions are enabled.\"));\r\n                    }\r\n                };\r\n                eventSource.onopen = () => {\r\n                    this._logger.log(LogLevel.Information, `SSE connected to ${this._url}`);\r\n                    this._eventSource = eventSource;\r\n                    opened = true;\r\n                    resolve();\r\n                };\r\n            }\r\n            catch (e) {\r\n                reject(e);\r\n                return;\r\n            }\r\n        });\r\n    }\r\n    async send(data) {\r\n        if (!this._eventSource) {\r\n            return Promise.reject(new Error(\"Cannot send until the transport is connected\"));\r\n        }\r\n        return sendMessage(this._logger, \"SSE\", this._httpClient, this._url, data, this._options);\r\n    }\r\n    stop() {\r\n        this._close();\r\n        return Promise.resolve();\r\n    }\r\n    _close(e) {\r\n        if (this._eventSource) {\r\n            this._eventSource.close();\r\n            this._eventSource = undefined;\r\n            if (this.onclose) {\r\n                this.onclose(e);\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=ServerSentEventsTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { SubjectSubscription } from \"./Utils\";\r\n/** Stream implementation to stream items to the server. */\r\nexport class Subject {\r\n    constructor() {\r\n        this.observers = [];\r\n    }\r\n    next(item) {\r\n        for (const observer of this.observers) {\r\n            observer.next(item);\r\n        }\r\n    }\r\n    error(err) {\r\n        for (const observer of this.observers) {\r\n            if (observer.error) {\r\n                observer.error(err);\r\n            }\r\n        }\r\n    }\r\n    complete() {\r\n        for (const observer of this.observers) {\r\n            if (observer.complete) {\r\n                observer.complete();\r\n            }\r\n        }\r\n    }\r\n    subscribe(observer) {\r\n        this.observers.push(observer);\r\n        return new SubjectSubscription(this, observer);\r\n    }\r\n}\r\n//# sourceMappingURL=Subject.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n// Not exported from index\r\n/** @private */\r\nexport class TextMessageFormat {\r\n    static write(output) {\r\n        return `${output}${TextMessageFormat.RecordSeparator}`;\r\n    }\r\n    static parse(input) {\r\n        if (input[input.length - 1] !== TextMessageFormat.RecordSeparator) {\r\n            throw new Error(\"Message is incomplete.\");\r\n        }\r\n        const messages = input.split(TextMessageFormat.RecordSeparator);\r\n        messages.pop();\r\n        return messages;\r\n    }\r\n}\r\nTextMessageFormat.RecordSeparatorCode = 0x1e;\r\nTextMessageFormat.RecordSeparator = String.fromCharCode(TextMessageFormat.RecordSeparatorCode);\r\n//# sourceMappingURL=TextMessageFormat.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { NullLogger } from \"./Loggers\";\r\n// Version token that will be replaced by the prepack command\r\n/** The version of the SignalR client. */\r\nexport const VERSION = \"8.0.7\";\r\n/** @private */\r\nexport class Arg {\r\n    static isRequired(val, name) {\r\n        if (val === null || val === undefined) {\r\n            throw new Error(`The '${name}' argument is required.`);\r\n        }\r\n    }\r\n    static isNotEmpty(val, name) {\r\n        if (!val || val.match(/^\\s*$/)) {\r\n            throw new Error(`The '${name}' argument should not be empty.`);\r\n        }\r\n    }\r\n    static isIn(val, values, name) {\r\n        // TypeScript enums have keys for **both** the name and the value of each enum member on the type itself.\r\n        if (!(val in values)) {\r\n            throw new Error(`Unknown ${name} value: ${val}.`);\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport class Platform {\r\n    // react-native has a window but no document so we should check both\r\n    static get isBrowser() {\r\n        return !Platform.isNode && typeof window === \"object\" && typeof window.document === \"object\";\r\n    }\r\n    // WebWorkers don't have a window object so the isBrowser check would fail\r\n    static get isWebWorker() {\r\n        return !Platform.isNode && typeof self === \"object\" && \"importScripts\" in self;\r\n    }\r\n    // react-native has a window but no document\r\n    static get isReactNative() {\r\n        return !Platform.isNode && typeof window === \"object\" && typeof window.document === \"undefined\";\r\n    }\r\n    // Node apps shouldn't have a window object, but WebWorkers don't either\r\n    // so we need to check for both WebWorker and window\r\n    static get isNode() {\r\n        return typeof process !== \"undefined\" && process.release && process.release.name === \"node\";\r\n    }\r\n}\r\n/** @private */\r\nexport function getDataDetail(data, includeContent) {\r\n    let detail = \"\";\r\n    if (isArrayBuffer(data)) {\r\n        detail = `Binary data of length ${data.byteLength}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${formatArrayBuffer(data)}'`;\r\n        }\r\n    }\r\n    else if (typeof data === \"string\") {\r\n        detail = `String data of length ${data.length}`;\r\n        if (includeContent) {\r\n            detail += `. Content: '${data}'`;\r\n        }\r\n    }\r\n    return detail;\r\n}\r\n/** @private */\r\nexport function formatArrayBuffer(data) {\r\n    const view = new Uint8Array(data);\r\n    // Uint8Array.map only supports returning another Uint8Array?\r\n    let str = \"\";\r\n    view.forEach((num) => {\r\n        const pad = num < 16 ? \"0\" : \"\";\r\n        str += `0x${pad}${num.toString(16)} `;\r\n    });\r\n    // Trim of trailing space.\r\n    return str.substr(0, str.length - 1);\r\n}\r\n// Also in signalr-protocol-msgpack/Utils.ts\r\n/** @private */\r\nexport function isArrayBuffer(val) {\r\n    return val && typeof ArrayBuffer !== \"undefined\" &&\r\n        (val instanceof ArrayBuffer ||\r\n            // Sometimes we get an ArrayBuffer that doesn't satisfy instanceof\r\n            (val.constructor && val.constructor.name === \"ArrayBuffer\"));\r\n}\r\n/** @private */\r\nexport async function sendMessage(logger, transportName, httpClient, url, content, options) {\r\n    const headers = {};\r\n    const [name, value] = getUserAgentHeader();\r\n    headers[name] = value;\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) sending data. ${getDataDetail(content, options.logMessageContent)}.`);\r\n    const responseType = isArrayBuffer(content) ? \"arraybuffer\" : \"text\";\r\n    const response = await httpClient.post(url, {\r\n        content,\r\n        headers: { ...headers, ...options.headers },\r\n        responseType,\r\n        timeout: options.timeout,\r\n        withCredentials: options.withCredentials,\r\n    });\r\n    logger.log(LogLevel.Trace, `(${transportName} transport) request complete. Response status: ${response.statusCode}.`);\r\n}\r\n/** @private */\r\nexport function createLogger(logger) {\r\n    if (logger === undefined) {\r\n        return new ConsoleLogger(LogLevel.Information);\r\n    }\r\n    if (logger === null) {\r\n        return NullLogger.instance;\r\n    }\r\n    if (logger.log !== undefined) {\r\n        return logger;\r\n    }\r\n    return new ConsoleLogger(logger);\r\n}\r\n/** @private */\r\nexport class SubjectSubscription {\r\n    constructor(subject, observer) {\r\n        this._subject = subject;\r\n        this._observer = observer;\r\n    }\r\n    dispose() {\r\n        const index = this._subject.observers.indexOf(this._observer);\r\n        if (index > -1) {\r\n            this._subject.observers.splice(index, 1);\r\n        }\r\n        if (this._subject.observers.length === 0 && this._subject.cancelCallback) {\r\n            this._subject.cancelCallback().catch((_) => { });\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport class ConsoleLogger {\r\n    constructor(minimumLogLevel) {\r\n        this._minLevel = minimumLogLevel;\r\n        this.out = console;\r\n    }\r\n    log(logLevel, message) {\r\n        if (logLevel >= this._minLevel) {\r\n            const msg = `[${new Date().toISOString()}] ${LogLevel[logLevel]}: ${message}`;\r\n            switch (logLevel) {\r\n                case LogLevel.Critical:\r\n                case LogLevel.Error:\r\n                    this.out.error(msg);\r\n                    break;\r\n                case LogLevel.Warning:\r\n                    this.out.warn(msg);\r\n                    break;\r\n                case LogLevel.Information:\r\n                    this.out.info(msg);\r\n                    break;\r\n                default:\r\n                    // console.debug only goes to attached debuggers in Node, so we use console.log for Trace and Debug\r\n                    this.out.log(msg);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\n/** @private */\r\nexport function getUserAgentHeader() {\r\n    let userAgentHeaderName = \"X-SignalR-User-Agent\";\r\n    if (Platform.isNode) {\r\n        userAgentHeaderName = \"User-Agent\";\r\n    }\r\n    return [userAgentHeaderName, constructUserAgent(VERSION, getOsName(), getRuntime(), getRuntimeVersion())];\r\n}\r\n/** @private */\r\nexport function constructUserAgent(version, os, runtime, runtimeVersion) {\r\n    // Microsoft SignalR/[Version] ([Detailed Version]; [Operating System]; [Runtime]; [Runtime Version])\r\n    let userAgent = \"Microsoft SignalR/\";\r\n    const majorAndMinor = version.split(\".\");\r\n    userAgent += `${majorAndMinor[0]}.${majorAndMinor[1]}`;\r\n    userAgent += ` (${version}; `;\r\n    if (os && os !== \"\") {\r\n        userAgent += `${os}; `;\r\n    }\r\n    else {\r\n        userAgent += \"Unknown OS; \";\r\n    }\r\n    userAgent += `${runtime}`;\r\n    if (runtimeVersion) {\r\n        userAgent += `; ${runtimeVersion}`;\r\n    }\r\n    else {\r\n        userAgent += \"; Unknown Runtime Version\";\r\n    }\r\n    userAgent += \")\";\r\n    return userAgent;\r\n}\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getOsName() {\r\n    if (Platform.isNode) {\r\n        switch (process.platform) {\r\n            case \"win32\":\r\n                return \"Windows NT\";\r\n            case \"darwin\":\r\n                return \"macOS\";\r\n            case \"linux\":\r\n                return \"Linux\";\r\n            default:\r\n                return process.platform;\r\n        }\r\n    }\r\n    else {\r\n        return \"\";\r\n    }\r\n}\r\n// eslint-disable-next-line spaced-comment\r\n/*#__PURE__*/ function getRuntimeVersion() {\r\n    if (Platform.isNode) {\r\n        return process.versions.node;\r\n    }\r\n    return undefined;\r\n}\r\nfunction getRuntime() {\r\n    if (Platform.isNode) {\r\n        return \"NodeJS\";\r\n    }\r\n    else {\r\n        return \"Browser\";\r\n    }\r\n}\r\n/** @private */\r\nexport function getErrorString(e) {\r\n    if (e.stack) {\r\n        return e.stack;\r\n    }\r\n    else if (e.message) {\r\n        return e.message;\r\n    }\r\n    return `${e}`;\r\n}\r\n/** @private */\r\nexport function getGlobalThis() {\r\n    // globalThis is semi-new and not available in Node until v12\r\n    if (typeof globalThis !== \"undefined\") {\r\n        return globalThis;\r\n    }\r\n    if (typeof self !== \"undefined\") {\r\n        return self;\r\n    }\r\n    if (typeof window !== \"undefined\") {\r\n        return window;\r\n    }\r\n    if (typeof global !== \"undefined\") {\r\n        return global;\r\n    }\r\n    throw new Error(\"could not find global\");\r\n}\r\n//# sourceMappingURL=Utils.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { HeaderNames } from \"./HeaderNames\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { TransferFormat } from \"./ITransport\";\r\nimport { Arg, getDataDetail, getUserAgentHeader, Platform } from \"./Utils\";\r\n/** @private */\r\nexport class WebSocketTransport {\r\n    constructor(httpClient, accessTokenFactory, logger, logMessageContent, webSocketConstructor, headers) {\r\n        this._logger = logger;\r\n        this._accessTokenFactory = accessTokenFactory;\r\n        this._logMessageContent = logMessageContent;\r\n        this._webSocketConstructor = webSocketConstructor;\r\n        this._httpClient = httpClient;\r\n        this.onreceive = null;\r\n        this.onclose = null;\r\n        this._headers = headers;\r\n    }\r\n    async connect(url, transferFormat) {\r\n        Arg.isRequired(url, \"url\");\r\n        Arg.isRequired(transferFormat, \"transferFormat\");\r\n        Arg.isIn(transferFormat, TransferFormat, \"transferFormat\");\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) Connecting.\");\r\n        let token;\r\n        if (this._accessTokenFactory) {\r\n            token = await this._accessTokenFactory();\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            url = url.replace(/^http/, \"ws\");\r\n            let webSocket;\r\n            const cookies = this._httpClient.getCookieString(url);\r\n            let opened = false;\r\n            if (Platform.isNode || Platform.isReactNative) {\r\n                const headers = {};\r\n                const [name, value] = getUserAgentHeader();\r\n                headers[name] = value;\r\n                if (token) {\r\n                    headers[HeaderNames.Authorization] = `Bearer ${token}`;\r\n                }\r\n                if (cookies) {\r\n                    headers[HeaderNames.Cookie] = cookies;\r\n                }\r\n                // Only pass headers when in non-browser environments\r\n                webSocket = new this._webSocketConstructor(url, undefined, {\r\n                    headers: { ...headers, ...this._headers },\r\n                });\r\n            }\r\n            else {\r\n                if (token) {\r\n                    url += (url.indexOf(\"?\") < 0 ? \"?\" : \"&\") + `access_token=${encodeURIComponent(token)}`;\r\n                }\r\n            }\r\n            if (!webSocket) {\r\n                // Chrome is not happy with passing 'undefined' as protocol\r\n                webSocket = new this._webSocketConstructor(url);\r\n            }\r\n            if (transferFormat === TransferFormat.Binary) {\r\n                webSocket.binaryType = \"arraybuffer\";\r\n            }\r\n            webSocket.onopen = (_event) => {\r\n                this._logger.log(LogLevel.Information, `WebSocket connected to ${url}.`);\r\n                this._webSocket = webSocket;\r\n                opened = true;\r\n                resolve();\r\n            };\r\n            webSocket.onerror = (event) => {\r\n                let error = null;\r\n                // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                    error = event.error;\r\n                }\r\n                else {\r\n                    error = \"There was an error with the transport\";\r\n                }\r\n                this._logger.log(LogLevel.Information, `(WebSockets transport) ${error}.`);\r\n            };\r\n            webSocket.onmessage = (message) => {\r\n                this._logger.log(LogLevel.Trace, `(WebSockets transport) data received. ${getDataDetail(message.data, this._logMessageContent)}.`);\r\n                if (this.onreceive) {\r\n                    try {\r\n                        this.onreceive(message.data);\r\n                    }\r\n                    catch (error) {\r\n                        this._close(error);\r\n                        return;\r\n                    }\r\n                }\r\n            };\r\n            webSocket.onclose = (event) => {\r\n                // Don't call close handler if connection was never established\r\n                // We'll reject the connect call instead\r\n                if (opened) {\r\n                    this._close(event);\r\n                }\r\n                else {\r\n                    let error = null;\r\n                    // ErrorEvent is a browser only type we need to check if the type exists before using it\r\n                    if (typeof ErrorEvent !== \"undefined\" && event instanceof ErrorEvent) {\r\n                        error = event.error;\r\n                    }\r\n                    else {\r\n                        error = \"WebSocket failed to connect. The connection could not be found on the server,\"\r\n                            + \" either the endpoint may not be a SignalR endpoint,\"\r\n                            + \" the connection ID is not present on the server, or there is a proxy blocking WebSockets.\"\r\n                            + \" If you have multiple servers check that sticky sessions are enabled.\";\r\n                    }\r\n                    reject(new Error(error));\r\n                }\r\n            };\r\n        });\r\n    }\r\n    send(data) {\r\n        if (this._webSocket && this._webSocket.readyState === this._webSocketConstructor.OPEN) {\r\n            this._logger.log(LogLevel.Trace, `(WebSockets transport) sending data. ${getDataDetail(data, this._logMessageContent)}.`);\r\n            this._webSocket.send(data);\r\n            return Promise.resolve();\r\n        }\r\n        return Promise.reject(\"WebSocket is not in the OPEN state\");\r\n    }\r\n    stop() {\r\n        if (this._webSocket) {\r\n            // Manually invoke onclose callback inline so we know the HttpConnection was closed properly before returning\r\n            // This also solves an issue where websocket.onclose could take 18+ seconds to trigger during network disconnects\r\n            this._close(undefined);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n    _close(event) {\r\n        // webSocket will be null if the transport did not start successfully\r\n        if (this._webSocket) {\r\n            // Clear websocket handlers because we are considering the socket closed now\r\n            this._webSocket.onclose = () => { };\r\n            this._webSocket.onmessage = () => { };\r\n            this._webSocket.onerror = () => { };\r\n            this._webSocket.close();\r\n            this._webSocket = undefined;\r\n        }\r\n        this._logger.log(LogLevel.Trace, \"(WebSockets transport) socket closed.\");\r\n        if (this.onclose) {\r\n            if (this._isCloseEvent(event) && (event.wasClean === false || event.code !== 1000)) {\r\n                this.onclose(new Error(`WebSocket closed with status code: ${event.code} (${event.reason || \"no reason given\"}).`));\r\n            }\r\n            else if (event instanceof Error) {\r\n                this.onclose(event);\r\n            }\r\n            else {\r\n                this.onclose();\r\n            }\r\n        }\r\n    }\r\n    _isCloseEvent(event) {\r\n        return event && typeof event.wasClean === \"boolean\" && typeof event.code === \"number\";\r\n    }\r\n}\r\n//# sourceMappingURL=WebSocketTransport.js.map","// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\nimport { AbortError, HttpError, TimeoutError } from \"./Errors\";\r\nimport { HttpClient, HttpResponse } from \"./HttpClient\";\r\nimport { LogLevel } from \"./ILogger\";\r\nimport { isArrayBuffer } from \"./Utils\";\r\nexport class XhrHttpClient extends HttpClient {\r\n    constructor(logger) {\r\n        super();\r\n        this._logger = logger;\r\n    }\r\n    /** @inheritDoc */\r\n    send(request) {\r\n        // Check that abort was not signaled before calling send\r\n        if (request.abortSignal && request.abortSignal.aborted) {\r\n            return Promise.reject(new AbortError());\r\n        }\r\n        if (!request.method) {\r\n            return Promise.reject(new Error(\"No method defined.\"));\r\n        }\r\n        if (!request.url) {\r\n            return Promise.reject(new Error(\"No url defined.\"));\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            const xhr = new XMLHttpRequest();\r\n            xhr.open(request.method, request.url, true);\r\n            xhr.withCredentials = request.withCredentials === undefined ? true : request.withCredentials;\r\n            xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\r\n            if (request.content === \"\") {\r\n                request.content = undefined;\r\n            }\r\n            if (request.content) {\r\n                // Explicitly setting the Content-Type header for React Native on Android platform.\r\n                if (isArrayBuffer(request.content)) {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"application/octet-stream\");\r\n                }\r\n                else {\r\n                    xhr.setRequestHeader(\"Content-Type\", \"text/plain;charset=UTF-8\");\r\n                }\r\n            }\r\n            const headers = request.headers;\r\n            if (headers) {\r\n                Object.keys(headers)\r\n                    .forEach((header) => {\r\n                    xhr.setRequestHeader(header, headers[header]);\r\n                });\r\n            }\r\n            if (request.responseType) {\r\n                xhr.responseType = request.responseType;\r\n            }\r\n            if (request.abortSignal) {\r\n                request.abortSignal.onabort = () => {\r\n                    xhr.abort();\r\n                    reject(new AbortError());\r\n                };\r\n            }\r\n            if (request.timeout) {\r\n                xhr.timeout = request.timeout;\r\n            }\r\n            xhr.onload = () => {\r\n                if (request.abortSignal) {\r\n                    request.abortSignal.onabort = null;\r\n                }\r\n                if (xhr.status >= 200 && xhr.status < 300) {\r\n                    resolve(new HttpResponse(xhr.status, xhr.statusText, xhr.response || xhr.responseText));\r\n                }\r\n                else {\r\n                    reject(new HttpError(xhr.response || xhr.responseText || xhr.statusText, xhr.status));\r\n                }\r\n            };\r\n            xhr.onerror = () => {\r\n                this._logger.log(LogLevel.Warning, `Error from HTTP request. ${xhr.status}: ${xhr.statusText}.`);\r\n                reject(new HttpError(xhr.statusText, xhr.status));\r\n            };\r\n            xhr.ontimeout = () => {\r\n                this._logger.log(LogLevel.Warning, `Timeout from HTTP request.`);\r\n                reject(new TimeoutError());\r\n            };\r\n            xhr.send(request.content);\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=XhrHttpClient.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import * as signalR from '@microsoft/signalr';\nconst chatHub = new signalR.HubConnectionBuilder().withUrl('/chatHub').build();\nchatHub.start().then(() => {\n    registerEvents();\n}).catch(err => {\n    console.error(err.toString());\n});\nchatHub.on('onConnected', (toUserId, conversations) => {\n    // load existing conversations\n    for (let i = 0; i < conversations.length; i++) {\n        const ctrId = `private_${toUserId}`;\n        const control = document.getElementById(ctrId);\n        const avatar = control.dataset.avatar;\n        let toAvatar = control.dataset.toAvatar;\n        const currentUserId = parseInt(document.getElementById('UserId').value);\n        let side = 'start';\n        let msgClass = 'text-bg-light';\n        let timeSide = 'end';\n        const message = conversations[i].body;\n        const dateTime = conversations[i].dateTime;\n        if (currentUserId !== conversations[i].toUserId) {\n            side = 'end';\n            msgClass = 'text-bg-primary';\n            timeSide = 'start';\n            toAvatar = avatar;\n        }\n        addMessage(ctrId, message, dateTime, side, timeSide, msgClass, toAvatar);\n    }\n});\nchatHub.on('sendPrivateMessage', (toUserId, message, toAvatar, dateTime) => {\n    const ctrId = `private_${toUserId}`;\n    const currentUserId = parseInt(document.getElementById('UserId').value);\n    let side = 'start';\n    let msgClass = 'text-bg-light';\n    let timeSide = 'end';\n    if (currentUserId !== toUserId) {\n        side = 'end';\n        msgClass = 'text-bg-primary';\n        timeSide = 'start';\n    }\n    addMessage(ctrId, message, dateTime, side, timeSide, msgClass, toAvatar);\n});\nfunction registerEvents() {\n    const li = document.querySelector('.chat-list-user.active');\n    if (li) {\n        addMessageUser(li);\n    }\n}\nfunction addMessageUser(li) {\n    const avatar = document.getElementsByClassName('img-navbar-avatar')[0].getAttribute('src');\n    const userId = parseInt(document.getElementById('UserId').value);\n    const toUserId = li.id;\n    const toUserName = li.querySelector('.name').innerText;\n    const avatarUrl = li.querySelector('.img-thumbnail').src;\n    if (userId !== parseInt(toUserId)) {\n        const ctrId = `private_${toUserId}`;\n        chatHub.invoke('ConnectAsync', avatar, parseInt(toUserId));\n        openPrivateChatCard(chatHub, toUserId, ctrId, toUserName, avatarUrl, avatar);\n    }\n    document.getElementById('deleteConversation').addEventListener('click', () => {\n        const active = document.querySelector('.chat-list-user.active');\n        const deleteId = active.id;\n        chatHub.invoke('DeleteConversationAsync', parseInt(deleteId));\n        location.reload();\n    });\n}\nfunction addMessage(ctrlId, message, dateTime, side, timeSide, msgClass, toAvatar) {\n    var _a;\n    const divChat = document.createElement('div');\n    divChat.className = `direct-chat-msg ${side}`;\n    divChat.innerHTML = `<div class=\"fs-6 mb-1 clearfix\"><span class=\"text-body-secondary float-${timeSide}\">${dateTime}</span></div> <img class=\"direct-chat-img img-thumbnail rounded\" src=\"${toAvatar}\" alt=\"Message User Image\"> <div class=\"direct-chat-text ${msgClass}\">${message}</div>`;\n    const messageContainer = (_a = document.getElementById(ctrlId)) === null || _a === void 0 ? void 0 : _a.querySelector('#divMessage');\n    messageContainer === null || messageContainer === void 0 ? void 0 : messageContainer.append(divChat);\n}\nfunction openPrivateChatCard(chatHub, userId, ctrId, userName, toAvatarUrl, avatarUrl) {\n    var _a, _b;\n    const $div = document.createElement('div');\n    $div.id = ctrId;\n    $div.className = 'card direct-chat';\n    $div.dataset.toAvatar = toAvatarUrl;\n    $div.dataset.avatar = avatarUrl;\n    $div.innerHTML = `<div class=\"card-header\"><div class=\"row justify-content-between align-items-center\">\n                          <div class=\"col-auto\"><h3 class=\"card-title\">${userName}</h3></div> \n                          <div class=\"col-auto\"><button id=\"deleteConversation\" class=\"btn btn-danger\" type=\"button\"><i class=\"fas fa-trash\"></i></button>  </div></div></div>\n                      <div class=\"card-body\"> <div id=\"divMessage\" class=\"direct-chat-messages\"></div>  </div>\n                      <div class=\"card-footer\">  <div class=\"input-group mb-0\">\n                          <input type=\"text\" id=\"txtPrivateMessage\" name=\"message\" placeholder=\"Type Message ...\" class=\"form-control\"  />\n                          <button type=\"button\" id=\"btnSendMessage\" class=\"btn btn-primary\"><i class=\"fas fa-paper-plane\"></i></button>\n                      </div>`;\n    // Text card event on Enter Button\n    (_a = $div.querySelector('#txtPrivateMessage')) === null || _a === void 0 ? void 0 : _a.addEventListener('keypress', (e) => {\n        var _a;\n        if (e.which === 13) {\n            (_a = $div.querySelector('#btnSendMessage')) === null || _a === void 0 ? void 0 : _a.click();\n        }\n    });\n    // Append private chat div inside the main div\n    const priChatDiv = document.getElementById('PriChatDiv');\n    if (priChatDiv) {\n        priChatDiv.replaceChildren();\n        priChatDiv.append($div);\n    }\n    // Send Button event in Private Chat\n    (_b = document.getElementById('btnSendMessage')) === null || _b === void 0 ? void 0 : _b.addEventListener('click', () => {\n        const $text = $div.querySelector('#txtPrivateMessage');\n        if ($text) {\n            const msg = $text.value;\n            if (msg.length > 0) {\n                chatHub.invoke('SendPrivateMessageAsync', parseInt(userId), msg);\n                $text.value = '';\n            }\n        }\n    });\n}\ndocument.querySelectorAll('.chat-list-user').forEach(user => {\n    user.addEventListener('click', () => {\n        const activeUser = document.querySelector('.chat-list .active');\n        if (activeUser) {\n            activeUser.classList.remove('active');\n        }\n        const li = user;\n        li.classList.add('active');\n        addMessageUser(li);\n    });\n});\n"],"names":["AbortController","constructor","this","_isAborted","onabort","abort","signal","aborted","AccessTokenHttpClient","HttpClient","innerClient","accessTokenFactory","super","_innerClient","_accessTokenFactory","send","request","allowRetry","_accessToken","url","indexOf","_setAuthorizationHeader","response","statusCode","headers","HeaderNames","Authorization","getCookieString","DefaultHttpClient","logger","fetch","Platform","isNode","_httpClient","FetchHttpClient","XMLHttpRequest","Error","XhrHttpClient","abortSignal","Promise","reject","AbortError","method","DEFAULT_RETRY_DELAYS_IN_MILLISECONDS","DefaultReconnectPolicy","retryDelays","_retryDelays","undefined","nextRetryDelayInMilliseconds","retryContext","previousRetryCount","HttpError","errorMessage","trueProto","prototype","__proto__","TimeoutError","UnsupportedTransportError","message","transport","errorType","DisabledTransportError","FailedToStartTransportError","FailedToNegotiateWithServerError","AggregateErrors","innerErrors","_logger","requireFunc","_jar","CookieJar","_fetchType","bind","getGlobalThis","_abortControllerType","abortController","error","timeoutId","timeout","msTimeout","setTimeout","log","LogLevel","Warning","content","isArrayBuffer","body","cache","credentials","withCredentials","mode","redirect","e","clearTimeout","ok","deserializeContent","statusText","status","responseType","payload","HttpResponse","cookies","getCookies","c","join","arrayBuffer","text","HandshakeProtocol","writeHandshakeRequest","handshakeRequest","TextMessageFormat","write","JSON","stringify","parseHandshakeResponse","data","messageData","remainingData","binaryData","Uint8Array","separatorIndex","RecordSeparatorCode","responseLength","String","fromCharCode","apply","Array","slice","call","byteLength","buffer","textData","RecordSeparator","substring","length","messages","parse","type","Cookie","get","options","post","HttpConnection","_stopPromiseResolver","features","_negotiateVersion","Arg","isRequired","createLogger","baseUrl","_resolveUrl","logMessageContent","webSocketModule","eventSourceModule","WebSocket","EventSource","httpClient","_connectionState","_connectionStarted","_options","onreceive","onclose","start","transferFormat","TransferFormat","Binary","isIn","Debug","_startInternalPromise","_startInternal","_stopPromise","_sendQueue","TransportSendQueue","stop","resolve","_stopInternal","_stopError","_stopConnection","skipNegotiation","HttpTransportType","WebSockets","_constructTransport","_startTransport","negotiateResponse","redirects","_getNegotiationResponse","ProtocolVersion","accessToken","_createTransport","LongPollingTransport","inherentKeepAlive","name","value","getUserAgentHeader","negotiateUrl","_resolveNegotiateUrl","negotiateVersion","connectionToken","connectionId","useStatefulReconnect","_useStatefulReconnect","_createConnectUrl","requestedTransport","requestedTransferFormat","connectUrl","_isITransport","transportExceptions","transports","availableTransports","negotiate","endpoint","transportOrError","_resolveTransportOrError","push","ex","WebSocketTransport","ServerSentEvents","ServerSentEventsTransport","LongPolling","reconnect","async","callStop","disconnected","connect","resend","actualTransport","transportMatches","transferFormats","map","s","Information","catch","lastIndexOf","isBrowser","aTag","window","document","createElement","href","URL","pathname","endsWith","searchParams","URLSearchParams","has","append","toString","search","_transport","_buffer","_executing","_sendBufferedData","PromiseSource","_transportResult","_sendLoopPromise","_sendLoop","_bufferData","promise","transportResult","_concatBuffers","arrayBuffers","totalLength","b","reduce","a","result","offset","item","set","_resolver","_rejecter","reason","HubConnectionState","HubConnection","create","connection","protocol","reconnectPolicy","serverTimeoutInMilliseconds","keepAliveIntervalInMilliseconds","statefulReconnectBufferSize","_nextKeepAlive","_freezeEventListener","_statefulReconnectBufferSize","_protocol","_reconnectPolicy","_handshakeProtocol","_processIncomingData","_connectionClosed","_callbacks","_methods","_closedCallbacks","_reconnectingCallbacks","_reconnectedCallbacks","_invocationId","_receivedHandshakeResponse","Disconnected","_cachedPingMessage","writeMessage","MessageType","Ping","state","Reconnecting","_startPromise","_startWithStateTransitions","Connecting","addEventListener","Connected","_stopDuringStartError","handshakePromise","_handshakeResolver","_handshakeRejecter","version","_sendMessage","_cleanupTimeout","_resetTimeoutPeriod","_resetKeepAliveInterval","_messageBuffer","MessageBuffer","_disconnected","_resend","_cleanupPingTimer","startPromise","Disconnecting","_reconnectDelayHandle","_completeClose","_sendCloseMessage","_sendWithProtocol","_createCloseMessage","stream","methodName","args","streams","streamIds","_replaceStreamingParams","invocationDescriptor","_createStreamInvocation","promiseQueue","subject","Subject","cancelCallback","cancelInvocation","_createCancelInvocation","invocationId","then","invocationEvent","Completion","complete","next","_launchStreams","_send","sendPromise","_createInvocation","invoke","on","newMethod","toLowerCase","off","handlers","removeIdx","splice","callback","onreconnecting","onreconnected","_processHandshakeResponse","parseMessages","_shouldProcessMessage","Invocation","_invokeClientMethod","getErrorString","StreamItem","Close","allowReconnect","Ack","_ack","Sequence","_resetSequence","responseMessage","Date","getTime","_timeoutHandle","serverTimeout","_pingServerHandle","nextPing","invocationMessage","target","methods","_createCompletionMessage","methodsCopy","expectsResponse","res","exception","completionMessage","m","prevRes","arguments","_cancelCallbacksWithError","_reconnect","_dispose","removeEventListener","forEach","reconnectStartTime","now","previousReconnectAttempts","retryError","nextRetryDelay","_getNextRetryDelay","elapsedMilliseconds","retryReason","callbacks","Object","keys","key","nonblocking","streamId","subscribe","err","_createStreamItemMessage","i","argument","_isObservable","arg","StreamInvocation","id","CancelInvocation","LogLevelNameMapping","trace","Trace","debug","info","information","warn","warning","critical","Critical","none","None","HubConnectionBuilder","configureLogging","logging","logLevel","mapping","parseLogLevel","ConsoleLogger","withUrl","transportTypeOrOptions","isNotEmpty","httpConnectionOptions","withHubProtocol","withAutomaticReconnect","retryDelaysOrReconnectPolicy","isArray","withServerTimeout","milliseconds","_serverTimeoutInMilliseconds","withKeepAliveInterval","_keepAliveIntervalInMilliseconds","withStatefulReconnect","bufferSize","build","NullLogger","instance","JsonHubProtocol","Text","input","hubMessages","parsedMessage","_isInvocationMessage","_isStreamItemMessage","_isCompletionMessage","_isAckMessage","_isSequenceMessage","_assertNotEmptyString","sequenceId","_logLevel","_message","pollAborted","_pollAbort","_running","_url","pollOptions","pollUrl","_closeError","_receiving","_poll","getDataDetail","_raiseOnClose","sendMessage","deleteOptions","delete","logMessage","_bufferSize","_messages","_totalMessageCount","_waitForSequenceMessage","_nextReceivingSequenceId","_latestReceivedSequenceId","_bufferedByteCount","_reconnectInProgress","_connection","serializedMessage","backpressurePromise","backpressurePromiseResolver","backpressurePromiseRejector","BufferedItem","ackMessage","newestAckedMessage","index","element","_id","currentId","_ackTimer","_rejector","_ackTimerHandle","resolver","rejector","encodeURIComponent","eventSource","opened","isWebWorker","onmessage","_close","onerror","onopen","_eventSource","close","observers","observer","SubjectSubscription","output","split","pop","VERSION","val","match","values","self","isReactNative","process","release","includeContent","detail","formatArrayBuffer","view","str","num","substr","ArrayBuffer","transportName","_subject","_observer","dispose","_","minimumLogLevel","_minLevel","out","console","msg","toISOString","userAgentHeaderName","constructUserAgent","getOsName","getRuntime","getRuntimeVersion","os","runtime","runtimeVersion","userAgent","majorAndMinor","platform","versions","node","stack","globalThis","g","webSocketConstructor","_logMessageContent","_webSocketConstructor","_headers","token","webSocket","replace","binaryType","_event","_webSocket","event","ErrorEvent","readyState","OPEN","_isCloseEvent","wasClean","code","xhr","open","setRequestHeader","header","onload","responseText","ontimeout","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","d","definition","o","defineProperty","enumerable","Function","obj","prop","hasOwnProperty","r","Symbol","toStringTag","chatHub","addMessageUser","li","avatar","getElementsByClassName","getAttribute","userId","parseInt","getElementById","toUserId","toUserName","querySelector","innerText","avatarUrl","src","ctrId","userName","toAvatarUrl","_a","_b","$div","className","dataset","toAvatar","innerHTML","which","click","priChatDiv","replaceChildren","$text","openPrivateChatCard","deleteId","location","reload","addMessage","ctrlId","dateTime","side","timeSide","msgClass","divChat","messageContainer","registerEvents","conversations","control","currentUserId","querySelectorAll","user","activeUser","classList","remove","add"],"sourceRoot":""}